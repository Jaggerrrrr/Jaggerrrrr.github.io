<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>数组的常见操作</title>
      <link href="/2023/02/08/%E6%95%B0%E7%BB%84%E7%9A%84%E5%B8%B8%E8%A7%81%E6%93%8D%E4%BD%9C/"/>
      <url>/2023/02/08/%E6%95%B0%E7%BB%84%E7%9A%84%E5%B8%B8%E8%A7%81%E6%93%8D%E4%BD%9C/</url>
      
        <content type="html"><![CDATA[<h1 id="数组的常见操作"><a href="#数组的常见操作" class="headerlink" title="数组的常见操作"></a>数组的常见操作</h1><h2 id=""><a href="#" class="headerlink" title=""></a></h2>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>获取随机数公式</title>
      <link href="/2023/02/08/%E8%8E%B7%E5%8F%96%E9%9A%8F%E6%9C%BA%E6%95%B0%E5%85%AC%E5%BC%8F/"/>
      <url>/2023/02/08/%E8%8E%B7%E5%8F%96%E9%9A%8F%E6%9C%BA%E6%95%B0%E5%85%AC%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<h2 id="获取随机数公式"><a href="#获取随机数公式" class="headerlink" title="获取随机数公式"></a>获取随机数公式</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(<span class="type">int</span>)(Math.random() * (b - a + <span class="number">1</span>) + a)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Git</title>
      <link href="/2023/01/28/git/"/>
      <url>/2023/01/28/git/</url>
      
        <content type="html"><![CDATA[<h2 id="初识Git"><a href="#初识Git" class="headerlink" title="初识Git"></a>初识Git</h2><h3 id="Git简介"><a href="#Git简介" class="headerlink" title="Git简介"></a>Git简介</h3><p>git是一个免费的、开源的分布式版本控制系统，可以快速高效的处理从小型到大型的各种项目。</p><h3 id="版本控制工具"><a href="#版本控制工具" class="headerlink" title="版本控制工具"></a>版本控制工具</h3><h4 id="集中版本控制工具：CVS、SVN、VSS"><a href="#集中版本控制工具：CVS、SVN、VSS" class="headerlink" title="集中版本控制工具：CVS、SVN、VSS"></a>集中版本控制工具：CVS、SVN、VSS</h4><p>优点：每个人都可以在一定程度上看到项目中的其他人在做些什么。管理员也可以轻松掌握每个开发者的权限，并且管理一个集中化的版本控制系统，要远比在各个客户端上维护本地数据库来的轻松容易。</p><p>缺点：中央服务器的单点故障，如果服务器宕机一小时，那么在这一小时内，谁都无法提交更新，也就无法协同工作。</p><h4 id="分布式版本控制工具：Git、Mercurial、Darcs"><a href="#分布式版本控制工具：Git、Mercurial、Darcs" class="headerlink" title="分布式版本控制工具：Git、Mercurial、Darcs"></a>分布式版本控制工具：Git、Mercurial、Darcs</h4><p>解决了集中式版本控制系统的缺陷</p><p>优点：服务器断网的情况下也可以进行开发（因为版本控制是在本地进行的）<br>每个客户端保存的也都是完整的项目（包含历史记录，更加安全）</p><h3 id="代码托管中心"><a href="#代码托管中心" class="headerlink" title="代码托管中心"></a>代码托管中心</h3><p>基于网络服务器的远程代码仓库，简称为远程库。</p><h4 id="局域网"><a href="#局域网" class="headerlink" title="局域网"></a>局域网</h4><p>GitLab</p><h4 id="互联网"><a href="#互联网" class="headerlink" title="互联网"></a>互联网</h4><p>GitHub<br>Gitee码云</p><h2 id="Git常用命令"><a href="#Git常用命令" class="headerlink" title="Git常用命令"></a>Git常用命令</h2><table><thead><tr><th>命令名称</th><th>作用</th></tr></thead><tbody><tr><td>git config –global user.name 用户名</td><td>设置用户签名</td></tr><tr><td>git config –global user.email 邮箱</td><td>设置用户签名</td></tr><tr><td>git init</td><td>初始化本地仓库</td></tr><tr><td>git status</td><td>查看本地库状态</td></tr><tr><td>git add 文件名</td><td>添加到暂存区</td></tr><tr><td>git commit -m “日志信息” 文件名</td><td>提交到本地库</td></tr><tr><td>git reflog</td><td>查看历史记录</td></tr><tr><td>git reset –hard 版本号</td><td>版本穿梭</td></tr></tbody></table><h3 id="初始化本地库"><a href="#初始化本地库" class="headerlink" title="初始化本地库"></a>初始化本地库</h3><p>初始化的含义：获取当前目录的控制权<br>语法：<mark>git init</mark></p><p><img src="/img/git_img/1.png" alt="初始化运行"></p><p>根据图片中我们可以看出在初始化后，自动为我们创建了一个.git的文件夹</p><h3 id="查看当前本地库状态"><a href="#查看当前本地库状态" class="headerlink" title="查看当前本地库状态"></a>查看当前本地库状态</h3><p>语法：<mark>git status</mark></p><p><img src="/img/git_img/2.png" alt="本地库状态"></p><p>On branch master：在当前分支上</p><p>No commits yet：当前还没有提交过任何文件</p><p>nothing to commit：没有可以提交的文件</p><p>在本地库中新建一个文件，再查看本地库状态</p><p><img src="/img/git_img/03.png" alt="创建一个文件之后本地库的状态"></p><p>Untracked files：没有追踪的文件</p><h3 id="添加暂存区-追踪文件"><a href="#添加暂存区-追踪文件" class="headerlink" title="添加暂存区(追踪文件)"></a>添加暂存区(追踪文件)</h3><h4 id="语法：git-add-文件名"><a href="#语法：git-add-文件名" class="headerlink" title="语法：git add + 文件名"></a>语法：git add + 文件名</h4><p><img src="/img/git_img/04.png" alt="添加暂存区"></p><p>添加完成之后再次检查本地库状态：</p><p><img src="/img/git_img/05.png" alt="检查本地库状态"></p><p>可以发现刚才添加的文件已经显示在这里了，同时git还提醒我们，如果想要从暂存区删除这个文件可以使用git rm –cached 文件名，这个命令，注意：只是从暂存区删除掉了，<mark>工作区的文件还是存在的</mark></p><h3 id="提交本地库"><a href="#提交本地库" class="headerlink" title="提交本地库"></a>提交本地库</h3><h4 id="语法：git-commit-m-“日志信息”-文件名"><a href="#语法：git-commit-m-“日志信息”-文件名" class="headerlink" title="语法：git commit -m “日志信息” 文件名"></a>语法：git commit -m “日志信息” 文件名</h4><p><img src="/img/git_img/06.png" alt="提交本地库"></p><p>[master (root-commit) 3606b5b] first commit：在master分支上进行了第一次提交，3606b5b就是版本号</p><h4 id="再次查看本地库状态"><a href="#再次查看本地库状态" class="headerlink" title="再次查看本地库状态"></a>再次查看本地库状态</h4><p><img src="/img/git_img/07.png" alt="本地库状态"></p><p>nothing to commit, working tree clean：没有可以提交的文件，工作树是干净的</p><h4 id="查看版本信息"><a href="#查看版本信息" class="headerlink" title="查看版本信息"></a>查看版本信息</h4><p>语法：git reflog</p><p><img src="/img/git_img/08.png" alt="查看版本信息"></p><p>版本号(指针指向master分支)</p><p>语法：git log</p><p><img src="/img/git_img/09.png" alt="查看详细版本信息"></p><h3 id="更新版本"><a href="#更新版本" class="headerlink" title="更新版本"></a>更新版本</h3><p>对hello.txt文件内容进行更新</p><p>语法：vim hello.txt，然后点击I键进入编辑模式，插入一行数字，然后点击ESC，冒号，wq保存并退出</p><p>再次查看修改文件后的本地库状态;</p><p><img src="/img/git_img/10.png" alt="查看修改本地库之后的状态"></p><p><span style="color:red;font-weight:bold">modified</span>：表示该文件经过了修改，红色说明还没有将修改后的文件上传到暂存区，使用git add追踪文件就可以了，然后我们使用git status查看本地库状态就会发现modified变成了绿色<br><img src="/img/git_img/11.png"></p><p>然后对暂存区的文件进行提交并查看本地库状态，发现指针指向了第二个版本</p><p><img src="/img/git_img/12.png"></p><h3 id="历史版本"><a href="#历史版本" class="headerlink" title="历史版本"></a>历史版本</h3><h4 id="版本穿梭"><a href="#版本穿梭" class="headerlink" title="版本穿梭"></a>版本穿梭</h4><p>如果最新版本的代码不如上一版好，那么我们可以穿梭到想要回到的版本</p><p>命令：<mark>git reset –hard 版本号</mark></p><p><img src="/img/git_img/13.png" alt="版本穿梭到第一版"></p><p>这时我们会发现head的指向发生了变化，另外版本穿梭会影响工作区的文件，即工作区的文件内容会随着版本发生变化</p><h3 id="分支"><a href="#分支" class="headerlink" title="分支"></a>分支</h3><h4 id="什么是分支"><a href="#什么是分支" class="headerlink" title="什么是分支"></a>什么是分支</h4><p>在版本控制过程中，同时推进多个任务，为每个任务，我们就可以创建每个任务的单独分支。使用分支意味着程序员可以把自己的工作从开发主线上分离开来，开发自己分支的时候，不会影响主线分支的运行，对于初学者而言，分支可以简单理解为副本，一个分支就是一个单独的副本。</p><h4 id="分支的好处"><a href="#分支的好处" class="headerlink" title="分支的好处"></a>分支的好处</h4><p>1.同时并行推进多个功能开发，提高开发效率。<br>2.各个分支在开发过程中，如果某一个分支开发失败，不会对其他分支有任何影响。失败的分支删除重新开始即可。</p><h4 id="分支的操作"><a href="#分支的操作" class="headerlink" title="分支的操作"></a>分支的操作</h4><table><thead><tr><th>命令名称</th><th>作用</th></tr></thead><tbody><tr><td>git branch 分支名</td><td>创建分支</td></tr><tr><td>git branch -v</td><td>查看分支</td></tr><tr><td>git checkout 分支名</td><td>切换分支</td></tr><tr><td>git merge 分支名</td><td>把指定的分支合并到当前分支上</td></tr></tbody></table><h5 id="创建一个分支"><a href="#创建一个分支" class="headerlink" title="创建一个分支"></a>创建一个分支</h5><p><img src="/img/git_img/14.png" alt="创建分支并检查"></p><h5 id="修改分支"><a href="#修改分支" class="headerlink" title="修改分支"></a>修改分支</h5><p><img src="/img/git_img/15.png" alt="切换分支"></p><p>此时我们发现后面的(master)变成了(hotfix)，说明成功切换分支到hotfix上了。</p><h5 id="合并分支-正常合并"><a href="#合并分支-正常合并" class="headerlink" title="合并分支(正常合并)"></a>合并分支(正常合并)</h5><p>我们先切换到master分支上，然后再将hotfix分支合并到master分支上</p><p><img src="/img/git_img/16.png" alt="分支合并"></p><h5 id="合并分支-冲突合并"><a href="#合并分支-冲突合并" class="headerlink" title="合并分支(冲突合并)"></a>合并分支(冲突合并)</h5><p>为什么会产生冲突：合并分支时，两个分支在同一个文件的同一个位置有两套完全不同的修改，Git无法替我们决定使用哪一个。必须人为决定新代码内容。</p><p>首先我们将同一行代码改成不同的内容，然后再进行合并，这时候就会报错，提示我们合并失败，且下一行提示我们master这个分支正在合并中，还没有合并完成。</p><p><img src="/img/git_img/17.png" alt="冲突合并"></p><p>然后我们使用vim hello.txt命令打开，会发现下方发生了变化的内容：</p><p><img src="/img/git_img/18.png"></p><p>手动解决冲突：将要合并的代码留下，多余的删除，并且把新增的特殊符号都删除掉，然后保存退出就可以了。<br>然后再将修改后的文件添加到暂存区并提交。</p><h2 id="GitHub操作"><a href="#GitHub操作" class="headerlink" title="GitHub操作"></a>GitHub操作</h2><h3 id="创建远程仓库"><a href="#创建远程仓库" class="headerlink" title="创建远程仓库"></a>创建远程仓库</h3><p><img src="/img/git_img/19.png" alt="创建远程仓库"><br><img src="/img/git_img/21.png" alt="远程仓库地址"></p><h3 id="创建远程仓库别名"><a href="#创建远程仓库别名" class="headerlink" title="创建远程仓库别名"></a>创建远程仓库别名</h3><p>语法：git remote -v：查看当前所有远程地址别名<br>      git remote add + 别名 + 远程地址：给远程地址起别名</p><p><img src="/img/git_img/20.png" alt="给远程仓库起别名"></p><h3 id="推送本地分支到远程仓库"><a href="#推送本地分支到远程仓库" class="headerlink" title="推送本地分支到远程仓库"></a>推送本地分支到远程仓库</h3><p>语法：git push + 别名 + 分支</p><p><img src="/img/git_img/22.png" alt="推送到远程仓库"></p><h3 id="拉取远程仓库到本地库"><a href="#拉取远程仓库到本地库" class="headerlink" title="拉取远程仓库到本地库"></a>拉取远程仓库到本地库</h3><p>语法：git pull + 别名 + 分支</p><p><img src="/img/git_img/23.png" alt="拉取远程仓库代码"></p><p>注意：拉取到本地库之后会自动提交本地库。</p><h3 id="克隆远程仓库到本地"><a href="#克隆远程仓库到本地" class="headerlink" title="克隆远程仓库到本地"></a>克隆远程仓库到本地</h3><p>语法：git clone 远程地址</p><p>首先，先从远程代码仓库的所有者获取clone地址：</p><p><img src="/img/git_img/24.png" alt="获取克隆地址"></p><p>然后进行克隆操作：</p><p><img src="/img/git_img/25.png" alt="克隆远程仓库"></p><p>总结：clone会做如下三步操作：<br>1.拉取代码<br>2.初始化本地库<br>3.创建别名<br>所以我们在进行clone操作时，不需要使用git init初始化本地库。</p><p><img src="/img/git_img/26.png" alt="自动起了个origin的别名"></p><p>另外，在推送别人的远程仓库时，会报错，提示我们没有权限，此时需要加入到仓库创建者的团队当中。</p><p><img src="/img/git_img/27.png" alt="添加团队成员的操作"></p><p><img src="/img/git_img/28.png"></p><p><img src="/img/git_img/29.png"></p><p><img src="/img/git_img/30.jpg" alt="被邀请人进入邀请链接"><br>邀请成功之后就可以进行代码推送了。</p><h3 id="SSH免密登录"><a href="#SSH免密登录" class="headerlink" title="SSH免密登录"></a>SSH免密登录</h3><p><img src="/img/git_img/31.png" alt="提示我们要添加一个公钥"></p><p>接下来来到我们下面的路径<br><img src="/img/git_img/32.png"></p><p>然后点击git bash here</p><p>输入如下指令，并且连续敲击三次回车：</p><p><img src="/img/git_img/33.png"></p><p>然后我们进入生成的.ssh文件夹中</p><p><img src="/img/git_img/34.png" alt="上面是私钥，下面是公钥"></p><p>然后我们使用cat id_rsa.pub查看公钥并复制，进入到github中</p><p><img src="/img/git_img/35.png"></p><p><img src="/img/git_img/36.png" alt="添加成功"></p><h2 id="IDEA集成Git"><a href="#IDEA集成Git" class="headerlink" title="IDEA集成Git"></a>IDEA集成Git</h2><h3 id="配置Git忽略文件"><a href="#配置Git忽略文件" class="headerlink" title="配置Git忽略文件"></a>配置Git忽略文件</h3><h4 id="为什么要忽略它们"><a href="#为什么要忽略它们" class="headerlink" title="为什么要忽略它们"></a>为什么要忽略它们</h4><p>Eclipse、IDEA等IDE中的部分代码文件与项目的实际功能无关，不参与服务器上不熟运行，把它们忽略掉能够屏蔽IDE工具之间的差异。</p><p>Eclipse：<br><img src="/img/git_img/37.png" alt="Eclipse的忽略文件"></p><p>IDEA：<br><img src="/img/git_img/38.png" alt="IDEA的忽略文件"></p><h4 id="怎么忽略"><a href="#怎么忽略" class="headerlink" title="怎么忽略"></a>怎么忽略</h4><p>1.在用户根目录下创建忽略规则文件 xxxx.ignore(前缀名随便起，建议是git.ignore)，<br>引用规则如下：</p><p><img src="/img/git_img/39.png"></p><p>2.在.gitconfig文件中引用忽略配置文件，core后面的是引用位置</p><p><img src="/img/git_img/40.png"></p><h3 id="IDEAGit操作"><a href="#IDEAGit操作" class="headerlink" title="IDEAGit操作"></a>IDEAGit操作</h3><h4 id="在IDEA中定位Git"><a href="#在IDEA中定位Git" class="headerlink" title="在IDEA中定位Git"></a>在IDEA中定位Git</h4><p><img src="/img/git_img/41.png"></p><h4 id="使用IDEA创建git本地库"><a href="#使用IDEA创建git本地库" class="headerlink" title="使用IDEA创建git本地库"></a>使用IDEA创建git本地库</h4><p><img src="/img/git_img/42.png"></p><p>执行完这一步之后，发现左边的文件变红了，表明未被追踪，此时也说明了创建本地库成功了。</p><h4 id="追踪文件"><a href="#追踪文件" class="headerlink" title="追踪文件"></a>追踪文件</h4><p><img src="/img/git_img/43.png" alt="右键项目根目录"></p><h4 id="提交"><a href="#提交" class="headerlink" title="提交"></a>提交</h4><p><img src="/img/git_img/44.png" alt="提交并推送"></p><p>修改完代码之后可以显示修改差异</p><p><img src="/img/git_img/45.png"></p><h4 id="查看版本信息-1"><a href="#查看版本信息-1" class="headerlink" title="查看版本信息"></a>查看版本信息</h4><p><img src="/img/git_img/46.png" alt="查看版本信息"></p><h4 id="切换版本"><a href="#切换版本" class="headerlink" title="切换版本"></a>切换版本</h4><p>右键要切换的版本，然后选择签出修订’版本号’</p><p><img src="/img/git_img/47.png" alt="切换版本"></p><h4 id="新建分支"><a href="#新建分支" class="headerlink" title="新建分支"></a>新建分支</h4><p>右键项目</p><p><img src="/img/git_img/48.png"></p><p>然后为新分支起一个名字，可以看到右下角分支发生了变化</p><p><img src="/img/git_img/49.png"></p><h4 id="切换分支"><a href="#切换分支" class="headerlink" title="切换分支"></a>切换分支</h4><p>点击右下角，然后选中要切换的分支，点击签出，即可切换分支</p><p><img src="/img/git_img/50.png" alt="切换分支"></p><h4 id="合并分支-正常合并-1"><a href="#合并分支-正常合并-1" class="headerlink" title="合并分支(正常合并)"></a>合并分支(正常合并)</h4><p>点击右下角，然后选中要合并过来的分支，点击合并到master，即可将hotfix分支合并到master分支上，此时左下角同时也会提示我们合并成功。</p><p><img src="/img/git_img/51.png" alt="合并分支"></p><h4 id="合并分支-冲突合并-1"><a href="#合并分支-冲突合并-1" class="headerlink" title="合并分支(冲突合并)"></a>合并分支(冲突合并)</h4><p>如果IDEA检测出冲突合并时，会智能弹出窗口，在中间窗口进行手动合并。</p><p><img src="/img/git_img/52.png"></p>]]></content>
      
      
      
        <tags>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java</title>
      <link href="/2023/01/06/JAVA/"/>
      <url>/2023/01/06/JAVA/</url>
      
        <content type="html"><![CDATA[<h2 id="一、计算机编程基础"><a href="#一、计算机编程基础" class="headerlink" title="一、计算机编程基础"></a>一、计算机编程基础</h2><h3 id="1-人机交互方式"><a href="#1-人机交互方式" class="headerlink" title="1.人机交互方式"></a>1.人机交互方式</h3><p>(1).图形化界面(GUI)，简单直观，使用者易于接受且容易上手。<br>(2).命令行方式(CLI)，需要有一个控制台，输入特定的指令，让计算机完成一些操作。</p><h3 id="2-常用的一些命令行指令"><a href="#2-常用的一些命令行指令" class="headerlink" title="2.常用的一些命令行指令"></a>2.常用的一些命令行指令</h3><p>(1).dir： 列出当前目录下的文件以及文件夹<br>(2).md：  创建目录(文件夹)<br>(3).rd：  删除目录(需要保证目录是空的)<br>(4).cd：  进入指定目录<br>(5).cd..：退回到上一级目录<br>(6).cd\： 退回到根目录<br>(7).del： 删除文件<br>(8).exit：退出dos命令行</p><p>del后面也可以跟文件夹名，作用是把该文件夹内所有文件都删除。</p><h3 id="3-Java的两种核心机制"><a href="#3-Java的两种核心机制" class="headerlink" title="3.Java的两种核心机制"></a>3.Java的两种核心机制</h3><h4 id="1-Java虚拟机-JVM"><a href="#1-Java虚拟机-JVM" class="headerlink" title="(1).Java虚拟机(JVM)"></a>(1).Java虚拟机(JVM)</h4><p>Ⅰ.JVM是一个虚拟的计算机，具有指令集并使用不同的存储区域。负责执行指令，管理数据、内存、寄存器。<br>Ⅱ.对于不同平台，有不同的虚拟机。<br>Ⅲ.只有某平台提供了对应的Java虚拟机，Java程序才能在此平台运行。<br>Ⅳ.Java虚拟机机制屏蔽了底层运行平台的差别，实现了“一次编译，到处运行”。</p><h4 id="2-垃圾回收"><a href="#2-垃圾回收" class="headerlink" title="(2).垃圾回收"></a>(2).垃圾回收</h4><p>Ⅰ.不再使用的内存空间应回收，在C/C++等语言中，由程序员负责回收无用内存。<br>Ⅱ.垃圾回收在Java程序运行过程中自动进行，程序员无法精确控制和干预。<br>Ⅲ.还是有可能出现内存泄露和内存溢出的问题。</p><h3 id="4-JDK-JRE"><a href="#4-JDK-JRE" class="headerlink" title="4.JDK,JRE"></a>4.JDK,JRE</h3><h4 id="1-JDK-Java-Decelopment-Kit-Java开发工具包"><a href="#1-JDK-Java-Decelopment-Kit-Java开发工具包" class="headerlink" title="(1).JDK(Java Decelopment Kit)Java开发工具包"></a>(1).JDK(Java Decelopment Kit)Java开发工具包</h4><p>JDK是提供给Java开发人员使用的，其中包含了Java的开发工具，也包括了JRE，所以安装了JDK就不用单独安装JRE了。</p><h4 id="2-JRE-Java-Runtime-Environment-Java运行环境"><a href="#2-JRE-Java-Runtime-Environment-Java运行环境" class="headerlink" title="(2).JRE(Java Runtime Environment)Java运行环境"></a>(2).JRE(Java Runtime Environment)Java运行环境</h4><p>包括Java虚拟机和Java程序所需的核心类库等，如果想要运行一个开发好的Java程序，计算机只需要安装JRE即可</p><p><img src="/img/java_img/01.png" alt="JDK与JRE的关系"></p><h2 id="二、了解Java"><a href="#二、了解Java" class="headerlink" title="二、了解Java"></a>二、了解Java</h2><h3 id="1-注释"><a href="#1-注释" class="headerlink" title="1.注释"></a>1.注释</h3><h4 id="1-单行注释"><a href="#1-单行注释" class="headerlink" title="(1).单行注释"></a>(1).单行注释</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Class Hello&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String args[])</span>&#123;</span><br><span class="line">        <span class="comment">//我是单行注释</span></span><br><span class="line">        System.out.println(<span class="string">&quot;Hello, World!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-多行注释"><a href="#2-多行注释" class="headerlink" title="(2).多行注释"></a>(2).多行注释</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Class Hello&#123;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">        我是多行注释，</span></span><br><span class="line"><span class="comment">        main方法是程序的入口！</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String args[])</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Hello, World!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3-文档注释-Java特有"><a href="#3-文档注释-Java特有" class="headerlink" title="(3).文档注释(Java特有)"></a>(3).文档注释(Java特有)</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">文档注释，可以被javadoc所解析，生成一套以网页文件形式体现的该程序的说明文档</span></span><br><span class="line"><span class="comment"><span class="doctag">@author</span> yuhong</span></span><br><span class="line"><span class="comment"><span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">Class Hello&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String args[])</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Hello, World!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="三、Java基本语法"><a href="#三、Java基本语法" class="headerlink" title="三、Java基本语法"></a>三、Java基本语法</h2><h3 id="1-关键字与保留字"><a href="#1-关键字与保留字" class="headerlink" title="1.关键字与保留字"></a>1.关键字与保留字</h3><h4 id="1-用于定义数据类型的关键字"><a href="#1-用于定义数据类型的关键字" class="headerlink" title="(1).用于定义数据类型的关键字"></a>(1).用于定义数据类型的关键字</h4><table><thead><tr><th></th><th></th><th></th><th></th></tr></thead><tbody><tr><td>class</td><td>interface</td><td>enum</td><td>byte</td></tr><tr><td>short</td><td>int</td><td>long</td><td>float</td></tr><tr><td>double</td><td>char</td><td>boolean</td><td>void</td></tr></tbody></table><h4 id="2-用于定义流程控制的关键字"><a href="#2-用于定义流程控制的关键字" class="headerlink" title="(2).用于定义流程控制的关键字"></a>(2).用于定义流程控制的关键字</h4><table><thead><tr><th></th><th></th><th></th><th></th></tr></thead><tbody><tr><td>if</td><td>else</td><td>switch</td><td>case</td></tr><tr><td>default</td><td>while</td><td>do</td><td>for</td></tr><tr><td>break</td><td>continue</td><td>return</td><td></td></tr></tbody></table><h4 id="3-用于定义访问权限修饰符的关键字"><a href="#3-用于定义访问权限修饰符的关键字" class="headerlink" title="(3).用于定义访问权限修饰符的关键字"></a>(3).用于定义访问权限修饰符的关键字</h4><table><thead><tr><th></th><th></th><th></th></tr></thead><tbody><tr><td>private</td><td>protected</td><td>public</td></tr></tbody></table><h4 id="4-用于定义类、函数、变量修饰符的关键字"><a href="#4-用于定义类、函数、变量修饰符的关键字" class="headerlink" title="(4).用于定义类、函数、变量修饰符的关键字"></a>(4).用于定义类、函数、变量修饰符的关键字</h4><table><thead><tr><th></th><th></th><th></th><th></th></tr></thead><tbody><tr><td>abstract</td><td>final</td><td>static</td><td>synchronized</td></tr></tbody></table><h4 id="5-用于定义类与类之间的关系"><a href="#5-用于定义类与类之间的关系" class="headerlink" title="(5).用于定义类与类之间的关系"></a>(5).用于定义类与类之间的关系</h4><table><thead><tr><th></th><th></th></tr></thead><tbody><tr><td>extends</td><td>implements</td></tr></tbody></table><h4 id="6-用于定义建立实例及引用实例，判断实例的关键字"><a href="#6-用于定义建立实例及引用实例，判断实例的关键字" class="headerlink" title="(6).用于定义建立实例及引用实例，判断实例的关键字"></a>(6).用于定义建立实例及引用实例，判断实例的关键字</h4><table><thead><tr><th></th><th></th><th></th><th></th></tr></thead><tbody><tr><td>new</td><td>this</td><td>super</td><td>instanceof</td></tr></tbody></table><h4 id="7-用于异常处理的关键字"><a href="#7-用于异常处理的关键字" class="headerlink" title="(7).用于异常处理的关键字"></a>(7).用于异常处理的关键字</h4><table><thead><tr><th></th><th></th><th></th><th></th><th></th></tr></thead><tbody><tr><td>try</td><td>catch</td><td>finally</td><td>throw</td><td>throws</td></tr></tbody></table><h4 id="8-用于包的关键字"><a href="#8-用于包的关键字" class="headerlink" title="(8).用于包的关键字"></a>(8).用于包的关键字</h4><table><thead><tr><th></th><th></th></tr></thead><tbody><tr><td>package</td><td>import</td></tr></tbody></table><h4 id="9-其他修饰符关键字"><a href="#9-其他修饰符关键字" class="headerlink" title="(9).其他修饰符关键字"></a>(9).其他修饰符关键字</h4><table><thead><tr><th></th><th></th><th></th><th></th><th></th></tr></thead><tbody><tr><td>native</td><td>strictfp</td><td>transient</td><td>volatile</td><td>assert</td></tr></tbody></table><h4 id="10-用于定义数据类型值的字面值"><a href="#10-用于定义数据类型值的字面值" class="headerlink" title="(10).用于定义数据类型值的字面值"></a>(10).用于定义数据类型值的字面值</h4><table><thead><tr><th></th><th></th><th></th></tr></thead><tbody><tr><td>true</td><td>false</td><td>null</td></tr></tbody></table><h4 id="保留字：现有Java版本尚未使用，但是以后的版本可能会作为关键字使用的，命名标识符时要避免使用这些保留字。"><a href="#保留字：现有Java版本尚未使用，但是以后的版本可能会作为关键字使用的，命名标识符时要避免使用这些保留字。" class="headerlink" title="保留字：现有Java版本尚未使用，但是以后的版本可能会作为关键字使用的，命名标识符时要避免使用这些保留字。"></a>保留字：现有Java版本尚未使用，但是以后的版本可能会作为关键字使用的，命名标识符时要避免使用这些保留字。</h4><p>goto、const</p><h3 id="2-Java中级名称命名规范"><a href="#2-Java中级名称命名规范" class="headerlink" title="2.Java中级名称命名规范"></a>2.Java中级名称命名规范</h3><h4 id="1-包名：多单词组成时所有字母都小写：xxxyyyzzz"><a href="#1-包名：多单词组成时所有字母都小写：xxxyyyzzz" class="headerlink" title="(1).包名：多单词组成时所有字母都小写：xxxyyyzzz"></a>(1).包名：多单词组成时所有字母都小写：xxxyyyzzz</h4><h4 id="2-类名、接口名：多单词组成时，所有单词的首字母大写：XxxYyyZzz"><a href="#2-类名、接口名：多单词组成时，所有单词的首字母大写：XxxYyyZzz" class="headerlink" title="(2).类名、接口名：多单词组成时，所有单词的首字母大写：XxxYyyZzz"></a>(2).类名、接口名：多单词组成时，所有单词的首字母大写：XxxYyyZzz</h4><h4 id="3-变量名、方法名：多单词组成时，第一个单词首字母小写，第二个单词开始每个单词首字母发泄：xxxYyyZzz"><a href="#3-变量名、方法名：多单词组成时，第一个单词首字母小写，第二个单词开始每个单词首字母发泄：xxxYyyZzz" class="headerlink" title="(3).变量名、方法名：多单词组成时，第一个单词首字母小写，第二个单词开始每个单词首字母发泄：xxxYyyZzz"></a>(3).变量名、方法名：多单词组成时，第一个单词首字母小写，第二个单词开始每个单词首字母发泄：xxxYyyZzz</h4><h4 id="4-常量名：所有字母都大写。多单词组成时用下划线连接：XXX-YYY-ZZZ"><a href="#4-常量名：所有字母都大写。多单词组成时用下划线连接：XXX-YYY-ZZZ" class="headerlink" title="(4).常量名：所有字母都大写。多单词组成时用下划线连接：XXX_YYY_ZZZ"></a>(4).常量名：所有字母都大写。多单词组成时用下划线连接：XXX_YYY_ZZZ</h4><h3 id="3-Java的几种数据类型"><a href="#3-Java的几种数据类型" class="headerlink" title="3.Java的几种数据类型"></a>3.Java的几种数据类型</h3><p><img src="/img/java_img/02.png" alt="数据类型"></p><h3 id="4-变量"><a href="#4-变量" class="headerlink" title="4.变量"></a>4.变量</h3><h4 id="1-整型：byte-1字节-8bit-，short-2字节-，int-4字节-，long-8字节"><a href="#1-整型：byte-1字节-8bit-，short-2字节-，int-4字节-，long-8字节" class="headerlink" title="(1).整型：byte(1字节=8bit)，short(2字节)，int(4字节)，long(8字节)"></a>(1).整型：byte(1字节=8bit)，short(2字节)，int(4字节)，long(8字节)</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">Class Hello&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String args[])</span>&#123;</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">            定义long类型的数据时要在后面加上“L”或者“l”，</span></span><br><span class="line"><span class="comment">            不加的话会默认转换为int类型的，但是超过了int的表示范围之后就必须加L</span></span><br><span class="line"><span class="comment">        */</span> </span><br><span class="line">        <span class="type">long</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">151234L</span>;</span><br><span class="line">        System.out.println(<span class="string">&quot;Hello, World!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-浮点型：float-4字节-、double-8字节"><a href="#2-浮点型：float-4字节-、double-8字节" class="headerlink" title="(2).浮点型：float(4字节)、double(8字节)"></a>(2).浮点型：float(4字节)、double(8字节)</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">Class Hello&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String args[])</span>&#123;</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">            定义float类型的变量时要在后面加上“f”或者“F”</span></span><br><span class="line"><span class="comment">        */</span> </span><br><span class="line">        <span class="type">double</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">15.1</span>;</span><br><span class="line">        <span class="type">float</span> <span class="variable">f1</span> <span class="operator">=</span> <span class="number">12.3f</span>;</span><br><span class="line">        System.out.println(<span class="string">&quot;Hello, World!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3-字符型：char-2字节"><a href="#3-字符型：char-2字节" class="headerlink" title="(3).字符型：char(2字节)"></a>(3).字符型：char(2字节)</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">Class Hello&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String args[])</span>&#123;</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">            1.声明一个字符</span></span><br><span class="line"><span class="comment">            2.转义字符</span></span><br><span class="line"><span class="comment">            3.直接使用Unicode的值来表示</span></span><br><span class="line"><span class="comment">        */</span> </span><br><span class="line">        <span class="type">char</span> <span class="variable">c1</span> <span class="operator">=</span> <span class="string">&#x27;a&#x27;</span>;</span><br><span class="line">        <span class="type">char</span> <span class="variable">c2</span> <span class="operator">=</span> <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">        <span class="type">char</span> <span class="variable">c3</span> <span class="operator">=</span> <span class="string">&#x27;\u0043&#x27;</span>;</span><br><span class="line">        System.out.println(<span class="string">&quot;Hello, World!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="4-布尔型：boolean-1字节"><a href="#4-布尔型：boolean-1字节" class="headerlink" title="(4).布尔型：boolean(1字节)"></a>(4).布尔型：boolean(1字节)</h4><h3 id="5-自动类型提升和强制类型转换"><a href="#5-自动类型提升和强制类型转换" class="headerlink" title="5.自动类型提升和强制类型转换"></a>5.自动类型提升和强制类型转换</h3><h4 id="1-自动类型提升"><a href="#1-自动类型提升" class="headerlink" title="(1).自动类型提升"></a>(1).自动类型提升</h4><p>当容量小的数据类型的变量与容量大的数据类型的变量做运算时，结果自动提升为容量大的类型。<br>byte 、 short 、 char -&gt; int -&gt; long -&gt; float -&gt; double<br>特别的，当byte、char、short三种类型的变量做运算时(包括与自身相同的类型)，结果为int型。<br>变量与整形、浮点型常量做运算时，整型常量默认为int型，浮点型常量默认为double型。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">VariableTest</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String args[])</span>&#123;</span><br><span class="line">        <span class="type">byte</span> <span class="variable">b1</span> <span class="operator">=</span> <span class="number">2</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">i1</span> <span class="operator">=</span> <span class="number">129</span>;</span><br><span class="line">        <span class="comment">// 因为运算结果是int，所以用更小的byte去接收是会报错的</span></span><br><span class="line">        <span class="comment">// byte b2 = b1 + i1;</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">i2</span> <span class="operator">=</span> b1 + i1;</span><br><span class="line">        <span class="type">long</span> <span class="variable">l1</span> <span class="operator">=</span> b1 + i1;</span><br><span class="line">        System.out.println(i2);  <span class="comment">//131</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 那么使用浮点型变量是否可以接收整形呢</span></span><br><span class="line">        <span class="type">float</span> <span class="variable">f</span> <span class="operator">=</span>b1 + i1;</span><br><span class="line">        System.out.println(f);  <span class="comment">//131.0</span></span><br><span class="line"></span><br><span class="line">        <span class="type">short</span> <span class="variable">s1</span> <span class="operator">=</span> <span class="number">123</span>;</span><br><span class="line">        <span class="type">double</span> <span class="variable">d1</span> <span class="operator">=</span> s1;</span><br><span class="line">        System.out.println(d1);  <span class="comment">//123.0</span></span><br><span class="line"></span><br><span class="line">        <span class="type">char</span> <span class="variable">c1</span> <span class="operator">=</span> <span class="string">&#x27;a&#x27;</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">i3</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">i4</span> <span class="operator">=</span> c1 + i3;</span><br><span class="line">        System.out.println(i4);  <span class="comment">//97</span></span><br><span class="line"></span><br><span class="line">        <span class="type">short</span> <span class="variable">s2</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line">        <span class="comment">// short s3 = c1 + s2;  报错</span></span><br><span class="line">        <span class="comment">// char c2 = c1 + s2;  报错</span></span><br><span class="line"></span><br><span class="line">        <span class="type">byte</span> <span class="variable">b2</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line">        <span class="comment">// char c3 = c1 + b2;  报错</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-强制类型转换"><a href="#2-强制类型转换" class="headerlink" title="(2).强制类型转换"></a>(2).强制类型转换</h4><p>即自动类型提升运算的逆运算<br>需要使用强转符：()<br>注意点：强制类型转换可能导致精度损失</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">VariableTest</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String args[])</span>&#123;</span><br><span class="line">        <span class="type">double</span> <span class="variable">d1</span> <span class="operator">=</span> <span class="number">12.3</span>;</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> <span class="variable">i1</span> <span class="operator">=</span> (<span class="type">int</span>)d1;</span><br><span class="line">        System.out.println(i1);  <span class="comment">//12</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="6-String类型变量的使用"><a href="#6-String类型变量的使用" class="headerlink" title="6.String类型变量的使用"></a>6.String类型变量的使用</h3><h4 id="1-String不是基本数据类型，属于引用数据类型"><a href="#1-String不是基本数据类型，属于引用数据类型" class="headerlink" title="(1).String不是基本数据类型，属于引用数据类型"></a>(1).String<mark>不是</mark>基本数据类型，属于引用数据类型</h4><h4 id="2-声明String类型变量时，使用一对双引号：””"><a href="#2-声明String类型变量时，使用一对双引号：””" class="headerlink" title="(2).声明String类型变量时，使用一对双引号：””"></a>(2).声明String类型变量时，使用一对双引号：””</h4><h4 id="3-String可以和8种基本数据类型做运算，且运算只能是连接运算：-，运算的结果仍是String类型"><a href="#3-String可以和8种基本数据类型做运算，且运算只能是连接运算：-，运算的结果仍是String类型" class="headerlink" title="(3).String可以和8种基本数据类型做运算，且运算只能是连接运算：+，运算的结果仍是String类型"></a>(3).String可以和8种基本数据类型做运算，且运算只能是连接运算：+，运算的结果仍是String类型</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StringTest</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String args[])</span>&#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">s1</span> <span class="operator">=</span> <span class="string">&quot;Hello World&quot;</span>;</span><br><span class="line">        System.out.println(s1);</span><br><span class="line">        <span class="type">int</span> <span class="variable">number</span> <span class="operator">=</span> <span class="number">1001</span>;</span><br><span class="line"><span class="type">String</span> <span class="variable">numberStr</span> <span class="operator">=</span> <span class="string">&quot;学号：&quot;</span>;</span><br><span class="line"><span class="type">String</span> <span class="variable">info</span> <span class="operator">=</span> numberStr + number;  <span class="comment">//+：连接运算</span></span><br><span class="line"><span class="type">boolean</span> <span class="variable">b1</span> <span class="operator">=</span><span class="literal">true</span>;</span><br><span class="line"><span class="type">String</span> <span class="variable">info2</span> <span class="operator">=</span> info + b1;</span><br><span class="line">System.out.println(info2);</span><br><span class="line">System.out.println(info);</span><br><span class="line"></span><br><span class="line"><span class="comment">//练习1</span></span><br><span class="line"><span class="type">char</span> <span class="variable">c</span> <span class="operator">=</span> <span class="string">&#x27;a&#x27;</span>;</span><br><span class="line"><span class="type">int</span> <span class="variable">num</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line"><span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> <span class="string">&quot;Hello&quot;</span>;</span><br><span class="line">System.out.println(c + num + str);  <span class="comment">//107Hello</span></span><br><span class="line">System.out.println(c + str + num);  <span class="comment">//aHello10</span></span><br><span class="line">System.out.println(c + (num + str));  <span class="comment">//a10Hello</span></span><br><span class="line">System.out.println((c + num) + str);  <span class="comment">//107Hello</span></span><br><span class="line">System.out.println(str + num + c);  <span class="comment">//Hello10a</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//练习2</span></span><br><span class="line"><span class="comment">//**</span></span><br><span class="line">System.out.println(<span class="string">&quot;**&quot;</span>);</span><br><span class="line">System.out.println(<span class="string">&#x27;*&#x27;</span>+<span class="string">&quot;\t&quot;</span>+<span class="string">&#x27;*&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果：</p><p><img src="/img/java_img/03.png" alt="运行结果"></p><h3 id="7-四种进制"><a href="#7-四种进制" class="headerlink" title="7.四种进制"></a>7.四种进制</h3><p>(1).二进制(binary)：以0b或者0B开头<br>(2).十进制(decimal)<br>(3).八进制(octal)：以数字0开头<br>(4).十六进制(hex)：以0x或者0X开头</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">System1</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line"><span class="type">int</span> <span class="variable">num1</span> <span class="operator">=</span> <span class="number">0b110</span>;</span><br><span class="line"><span class="type">int</span> <span class="variable">num2</span> <span class="operator">=</span> <span class="number">110</span>;</span><br><span class="line"><span class="type">int</span> <span class="variable">num3</span> <span class="operator">=</span> <span class="number">0127</span>;</span><br><span class="line"><span class="type">int</span> <span class="variable">num4</span> <span class="operator">=</span> <span class="number">0x110A</span>;</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">&quot;num1 = &quot;</span>+num1);</span><br><span class="line">System.out.println(<span class="string">&quot;num2 = &quot;</span>+num2);</span><br><span class="line">System.out.println(<span class="string">&quot;num3 = &quot;</span>+num3);</span><br><span class="line">System.out.println(<span class="string">&quot;num4 = &quot;</span>+num4);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="补充组原知识：原码、反码、补码"><a href="#补充组原知识：原码、反码、补码" class="headerlink" title="补充组原知识：原码、反码、补码"></a>补充组原知识：原码、反码、补码</h4><p><img src="/img/java_img/04.png" alt="原码、反码、补码"></p><h3 id="8-运算符"><a href="#8-运算符" class="headerlink" title="8.运算符"></a>8.运算符</h3><h4 id="1-算术运算符"><a href="#1-算术运算符" class="headerlink" title="(1).算术运算符"></a>(1).算术运算符</h4><p><img src="/img/java_img/05.png" alt="运算符"></p><h5 id="取模运算的结果正负性与被模数保持一致"><a href="#取模运算的结果正负性与被模数保持一致" class="headerlink" title="取模运算的结果正负性与被模数保持一致"></a><mark>取模运算的结果正负性与被模数保持一致</mark></h5><h4 id="2-逻辑运算符"><a href="#2-逻辑运算符" class="headerlink" title="(2).逻辑运算符"></a>(2).逻辑运算符</h4><p><img src="/img/java_img/06.png" alt="逻辑运算符"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 逻辑运算符：</span></span><br><span class="line"><span class="comment"> * &amp;  &amp;&amp;  |  ||  !  ^</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * 说明：</span></span><br><span class="line"><span class="comment"> * 1.逻辑运算符操作的都是boolean型的变量</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">package</span> logic;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LogicTest</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line"><span class="comment">//区分逻辑&amp; 与 &amp;&amp;</span></span><br><span class="line"><span class="comment">//相同点1：&amp;与&amp;&amp;的运算结果相同</span></span><br><span class="line"><span class="comment">//相同点2：当符号昨天是true时，二者都会执行符号右边的运算</span></span><br><span class="line"><span class="comment">//不同点：当符号左边是false时，&amp;会继续执行符号右边的运算。而&amp;&amp;不再执行</span></span><br><span class="line"><span class="type">boolean</span> <span class="variable">b1</span> <span class="operator">=</span> <span class="literal">true</span>;</span><br><span class="line">b1 = <span class="literal">false</span>;</span><br><span class="line"><span class="type">int</span> <span class="variable">num1</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line"><span class="keyword">if</span>(b1 &amp; (num1++ &gt; <span class="number">0</span>)) &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;我现在在北京&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;我现在在南京&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">&quot;num1 = &quot;</span> + num1);</span><br><span class="line"></span><br><span class="line"><span class="type">boolean</span> <span class="variable">b2</span> <span class="operator">=</span> <span class="literal">true</span>;</span><br><span class="line">b2 = <span class="literal">false</span>;</span><br><span class="line"><span class="type">int</span> <span class="variable">num2</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line"><span class="keyword">if</span>(b2 &amp;&amp; (num2++ &gt; <span class="number">0</span>)) &#123;  <span class="comment">//短路与，因为b2已经是false了，不管&amp;&amp;后面是真是假，最后整体肯定为假，所以就不执行后面的语句了，所以num2++就没有执行，直接跳过了，即被短路了</span></span><br><span class="line">System.out.println(<span class="string">&quot;我现在在北京&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;我现在在南京&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">&quot;num2 = &quot;</span> + num2);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//区分|与||</span></span><br><span class="line"><span class="comment">//想同点1：|与||运算结果是下昂痛的</span></span><br><span class="line"><span class="comment">//相同点2：当符号左边是false时，二者都会执行符号右边的运算</span></span><br><span class="line"><span class="comment">//不同点：当符号左边是true时，|继续执行符号右边的运算，而||不再执行</span></span><br><span class="line"></span><br><span class="line"><span class="type">boolean</span> <span class="variable">b3</span> <span class="operator">=</span><span class="literal">false</span>;</span><br><span class="line">b3 = <span class="literal">true</span>;</span><br><span class="line"><span class="type">int</span> <span class="variable">num3</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line"><span class="keyword">if</span>(b3 | (num3++ &gt;<span class="number">0</span>)) &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;我现在在北京&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;我现在在南京&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">&quot;num3 = &quot;</span>+ num3);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">boolean</span> <span class="variable">b4</span> <span class="operator">=</span><span class="literal">false</span>;</span><br><span class="line">b4 = <span class="literal">true</span>;</span><br><span class="line"><span class="type">int</span> <span class="variable">num4</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line"><span class="keyword">if</span>(b4 || (num4++ &gt;<span class="number">0</span>)) &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;我现在在北京&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;我现在在南京&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">&quot;num4 = &quot;</span>+ num4);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="3-位运算符"><a href="#3-位运算符" class="headerlink" title="(3).位运算符"></a>(3).位运算符</h4><p><img src="/img/java_img/07.png" alt="位运算符"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 1.位运算符操作的都是整形的数据</span></span><br><span class="line"><span class="comment"> * 2.&lt;&lt;：在一定范围内，每向左移一位，相当于乘2，末尾补0</span></span><br><span class="line"><span class="comment"> *   &gt;&gt;：在一定范围内，每向右移一位，相当于除以2，开头是0就补0，开头是1就补1</span></span><br><span class="line"><span class="comment"> *   &gt;&gt;&gt;:在一定范围内，每向右移一位，相当于除以2，开头补0</span></span><br><span class="line"><span class="comment"> * */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">package</span> bit_operator;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Bit_operator</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line"><span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span><span class="number">21</span>;</span><br><span class="line"><span class="comment">//左移两位，就是乘2的2次方，在原本二进制后面加上了两个0</span></span><br><span class="line">System.out.println(<span class="string">&quot;i &lt;&lt; 2 :&quot;</span> + (i &lt;&lt; <span class="number">2</span>));</span><br><span class="line"><span class="comment">//左移三位，就是乘2的3次方，在原本二进制后面加上了三个0</span></span><br><span class="line">System.out.println(<span class="string">&quot;i &lt;&lt; 3 :&quot;</span> + (i &lt;&lt; <span class="number">3</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">//&amp;是与运算，将每位上的数进行与操作：两者都为1，结果为1，其余都为0</span></span><br><span class="line"><span class="comment">//|是或运算，将每位上的数进行或操作：二者有一个为1，结果为1</span></span><br><span class="line"><span class="comment">//^是异或运算，将每位上的数进行异或操作：二者不一致的时候，结果为1，其余为0</span></span><br><span class="line"><span class="type">int</span> <span class="variable">m</span> <span class="operator">=</span> <span class="number">12</span>;</span><br><span class="line"><span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span><span class="number">5</span>;</span><br><span class="line">System.out.println(<span class="string">&quot;m &amp; n :&quot;</span> + (m &amp; n));</span><br><span class="line">System.out.println(<span class="string">&quot;m | n :&quot;</span> + (m | n));</span><br><span class="line">System.out.println(<span class="string">&quot;m ^ n :&quot;</span> + (m ^ n));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="4-运算符的优先级"><a href="#4-运算符的优先级" class="headerlink" title="(4).运算符的优先级"></a>(4).运算符的优先级</h4><p><img src="/img/java_img/08.png" alt="运算符的优先级"></p><h3 id="9-Scanner类的使用"><a href="#9-Scanner类的使用" class="headerlink" title="9.Scanner类的使用"></a>9.Scanner类的使用</h3><h4 id="具体的实现步骤："><a href="#具体的实现步骤：" class="headerlink" title="具体的实现步骤："></a>具体的实现步骤：</h4><p>1.导包：import java.util.Scanner;<br>2.Scanner的实例化<br>3.调用Scanner类的相关方法，来获取指定类型的变量</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Scanner1</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="comment">// Scanner的实例化</span></span><br><span class="line"><span class="type">Scanner</span> <span class="variable">scan</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line"><span class="comment">//调用nextInt()方法，来获取键盘输入的int型变量</span></span><br><span class="line"><span class="type">int</span> <span class="variable">num</span> <span class="operator">=</span> scan.nextInt();</span><br><span class="line"><span class="comment">//获取其他变量的输入方法：</span></span><br><span class="line"><span class="comment">//String类型：next()</span></span><br><span class="line"><span class="comment">//Double类型：nextDouble()</span></span><br><span class="line"><span class="comment">//Boolean类型：nextBoolean()</span></span><br><span class="line"><span class="comment">//对于char类型的获取没有提供相关的方法，故可以使用字符串的方法来获取</span></span><br><span class="line">System.out.println(num);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="10-分支结构-if-else-switch-case"><a href="#10-分支结构-if-else-switch-case" class="headerlink" title="10.分支结构(if-else, switch-case)"></a>10.分支结构(if-else, switch-case)</h3><p>注意点：switch中的表达式，只能是如下的六种数据类型之一：<br>byte, short, char, int, 枚举类型, String</p><h3 id="11-循环结构-for-do-while-while"><a href="#11-循环结构-for-do-while-while" class="headerlink" title="11.循环结构(for, do while, while)"></a>11.循环结构(for, do while, while)</h3><h4 id="1-嵌套循环的应用：打印出100以内所有的质数"><a href="#1-嵌套循环的应用：打印出100以内所有的质数" class="headerlink" title="(1).嵌套循环的应用：打印出100以内所有的质数"></a>(1).嵌套循环的应用：打印出100以内所有的质数</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//100以内所有质数</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">package</span> cycle1;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Cycle</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line"><span class="type">boolean</span> <span class="variable">isFlag</span> <span class="operator">=</span> <span class="literal">true</span>;  <span class="comment">//用于记录i是否可以被除尽</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">2</span>;i&lt;=<span class="number">100</span>;i++) &#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">2</span>;j&lt;i;j++) &#123;</span><br><span class="line"><span class="keyword">if</span>(i%j==<span class="number">0</span>) &#123;</span><br><span class="line">isFlag = <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(isFlag==<span class="literal">true</span>) &#123;</span><br><span class="line">System.out.println(i);</span><br><span class="line">&#125;</span><br><span class="line">isFlag = <span class="literal">true</span>;  <span class="comment">//重置isFlag的值，否则当isFlag为false时，上方的条件语句永远不会执行</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对以上算法进行有优化：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line"><span class="type">long</span> <span class="variable">start</span> <span class="operator">=</span> System.currentTimeMillis();  <span class="comment">//获取程序刚开始运行时的时间戳</span></span><br><span class="line"><span class="type">boolean</span> <span class="variable">isFlag</span> <span class="operator">=</span> <span class="literal">true</span>;  <span class="comment">//用于记录i是否可以被除尽</span></span><br><span class="line">label:<span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">2</span>;i&lt;=<span class="number">10000</span>;i++) &#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">2</span>;j&lt;=Math.sqrt(i);j++) &#123;  <span class="comment">//优化二：开方，调用Math.sqrt方法，需加上等号，最大的一个质数是97</span></span><br><span class="line"><span class="comment">//开方后是9点多，所以9就是它的一个倍数，不需要再试更大的数</span></span><br><span class="line"><span class="comment">//根据时间戳的结果，在优化一的基础上又变为了17ms，又更进一步缩短了程序的运行时间</span></span><br><span class="line"><span class="keyword">if</span>(i%j==<span class="number">0</span>) &#123;</span><br><span class="line">isFlag = <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">break</span> label;  <span class="comment">//break默认是结束最近的一层循环，但也可以指明跳出指定的循环，比如跳出外层循环</span></span><br><span class="line"><span class="comment">//在要跳出的指定循环前加上label:然后在break后面加上label就可以跳出label指定的循环</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(isFlag==<span class="literal">true</span>) &#123;</span><br><span class="line">System.out.println(i);</span><br><span class="line">&#125;</span><br><span class="line">isFlag = <span class="literal">true</span>;  <span class="comment">//重置isFlag的值，否则当isFlag为false时，上方的条件语句永远不会执行</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="type">long</span> <span class="variable">end</span> <span class="operator">=</span> System.currentTimeMillis();  <span class="comment">//获取程序运行结束时的时间戳</span></span><br><span class="line">System.out.println(end-start);  <span class="comment">//两个时间戳相减即可得到程序运行的时间</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-小项目一-家庭收支管理系统"><a href="#2-小项目一-家庭收支管理系统" class="headerlink" title="(2).小项目一-家庭收支管理系统"></a>(2).小项目一-家庭收支管理系统</h4><p>AccountController.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> accountcon;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AccountController</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line"><span class="type">boolean</span> <span class="variable">isFlag</span> <span class="operator">=</span> <span class="literal">true</span>;</span><br><span class="line"><span class="comment">//用于记录用户的收入和支出详情</span></span><br><span class="line"><span class="type">String</span> <span class="variable">details</span> <span class="operator">=</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line"><span class="comment">//初始金额</span></span><br><span class="line"><span class="type">int</span> <span class="variable">balance</span> <span class="operator">=</span> <span class="number">10000</span>;</span><br><span class="line"><span class="keyword">while</span>(isFlag) &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;----------家庭收支记账软件----------\n&quot;</span>);</span><br><span class="line">System.out.println(<span class="string">&quot;            1.收支明细&quot;</span>);</span><br><span class="line">System.out.println(<span class="string">&quot;            2.登记收入&quot;</span>);</span><br><span class="line">System.out.println(<span class="string">&quot;            3.登记支出&quot;</span>);</span><br><span class="line">System.out.println(<span class="string">&quot;            4.退    出\n&quot;</span>);</span><br><span class="line">System.out.println(<span class="string">&quot;     请输入1-4来执行对应的功能&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//调用Utility文件中的方法，获取用户的选择</span></span><br><span class="line"><span class="type">char</span> <span class="variable">selection</span> <span class="operator">=</span> Utility.readMenuSelection();</span><br><span class="line"></span><br><span class="line"><span class="keyword">switch</span>(selection) &#123;</span><br><span class="line"><span class="comment">//因为selection是char类型的，所以下面的1,2,3,4均需加上单引号</span></span><br><span class="line"><span class="keyword">case</span> <span class="string">&#x27;1&#x27;</span> :</span><br><span class="line">System.out.println(<span class="string">&quot;1.收支明细&quot;</span>);</span><br><span class="line">System.out.println(<span class="string">&quot;----------家庭收支记账软件----------\n&quot;</span>);</span><br><span class="line">System.out.println(<span class="string">&quot;收支\t账户金额\t收支金额\t说  明\n&quot;</span>);</span><br><span class="line">System.out.println(details);</span><br><span class="line">System.out.println(<span class="string">&quot;-----------------------------------\n&quot;</span>);</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="string">&#x27;2&#x27;</span> :</span><br><span class="line">System.out.println(<span class="string">&quot;本次收入金额：&quot;</span>);</span><br><span class="line"><span class="type">int</span> <span class="variable">money</span> <span class="operator">=</span> Utility.readNumber();</span><br><span class="line">System.out.println(<span class="string">&quot;本次收入说明：&quot;</span>);</span><br><span class="line"><span class="type">String</span> <span class="variable">info</span> <span class="operator">=</span> Utility.readString();</span><br><span class="line"></span><br><span class="line"><span class="comment">//处理余额balance</span></span><br><span class="line">balance += money;</span><br><span class="line"></span><br><span class="line"><span class="comment">//处理details</span></span><br><span class="line">details += <span class="string">&quot;收入\t&quot;</span> + balance + <span class="string">&quot;\t+&quot;</span> + money + <span class="string">&quot;\t&quot;</span> + info + <span class="string">&quot;\n&quot;</span>;</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">&quot;--------------登记完成--------------\n&quot;</span>);</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="string">&#x27;3&#x27;</span> :</span><br><span class="line">System.out.println(<span class="string">&quot;本次支出金额：&quot;</span>);</span><br><span class="line"><span class="type">int</span> <span class="variable">moneyout</span> <span class="operator">=</span> Utility.readNumber();</span><br><span class="line">System.out.println(<span class="string">&quot;本次支出说明：&quot;</span>);</span><br><span class="line"><span class="type">String</span> <span class="variable">infoout</span> <span class="operator">=</span> Utility.readString();</span><br><span class="line"></span><br><span class="line"><span class="comment">//处理balance</span></span><br><span class="line"><span class="keyword">if</span>(balance &gt;= moneyout) &#123;</span><br><span class="line">balance -= moneyout;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;支付失败&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//处理deatils</span></span><br><span class="line">details += <span class="string">&quot;支出\t&quot;</span> + balance + <span class="string">&quot;\t-&quot;</span> + moneyout + <span class="string">&quot;\t&quot;</span> + infoout + <span class="string">&quot;\n&quot;</span>;</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">&quot;--------------登记完成--------------\\n&quot;</span>);</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="string">&#x27;4&#x27;</span> :</span><br><span class="line">System.out.println(<span class="string">&quot;确定要退出吗（Y/N）\n&quot;</span>);</span><br><span class="line"><span class="type">char</span> <span class="variable">isExit</span> <span class="operator">=</span> Utility.readConfirmSelection();</span><br><span class="line"><span class="keyword">if</span>(isExit == <span class="string">&#x27;Y&#x27;</span>) &#123;</span><br><span class="line">isFlag = <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>Utility.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> accountcon; </span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">Utility工具类：</span></span><br><span class="line"><span class="comment">将不同的功能封装为方法，就是可以直接通过调用方法使用它的功能，而无需考虑具体的功能实现细节。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Utility</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">Scanner</span> <span class="variable">scanner</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">用于界面菜单的选择。该方法读取键盘，如果用户键入’1’-’4’中的任意字符，则方法返回。返回值为用户键入字符。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">char</span> <span class="title function_">readMenuSelection</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">char</span> c;</span><br><span class="line">        <span class="keyword">for</span> (; ; ) &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> readKeyBoard(<span class="number">1</span>);</span><br><span class="line">            c = str.charAt(<span class="number">0</span>);</span><br><span class="line">            <span class="keyword">if</span> (c != <span class="string">&#x27;1&#x27;</span> &amp;&amp; c != <span class="string">&#x27;2&#x27;</span> &amp;&amp; c != <span class="string">&#x27;3&#x27;</span> &amp;&amp; c != <span class="string">&#x27;4&#x27;</span>) &#123;</span><br><span class="line">                System.out.print(<span class="string">&quot;选择错误，请重新输入：&quot;</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> c;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">用于收入和支出金额的输入。该方法从键盘读取一个不超过4位长度的整数，并将其作为方法的返回值。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">readNumber</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">int</span> n;</span><br><span class="line">        <span class="keyword">for</span> (; ; ) &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> readKeyBoard(<span class="number">4</span>);</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                n = Integer.parseInt(str);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (NumberFormatException e) &#123;</span><br><span class="line">                System.out.print(<span class="string">&quot;数字输入错误，请重新输入：&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> n;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">用于收入和支出说明的输入。该方法从键盘读取一个不超过8位长度的字符串，并将其作为方法的返回值。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">readString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> readKeyBoard(<span class="number">8</span>);</span><br><span class="line">        <span class="keyword">return</span> str;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">用于确认选择的输入。该方法从键盘读取‘Y’或’N’，并将其作为方法的返回值。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">char</span> <span class="title function_">readConfirmSelection</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">char</span> c;</span><br><span class="line">        <span class="keyword">for</span> (; ; ) &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> readKeyBoard(<span class="number">1</span>).toUpperCase();</span><br><span class="line">            c = str.charAt(<span class="number">0</span>);</span><br><span class="line">            <span class="keyword">if</span> (c == <span class="string">&#x27;Y&#x27;</span> || c == <span class="string">&#x27;N&#x27;</span>) &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                System.out.print(<span class="string">&quot;选择错误，请重新输入：&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> c;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String <span class="title function_">readKeyBoard</span><span class="params">(<span class="type">int</span> limit)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">line</span> <span class="operator">=</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (scanner.hasNext()) &#123;</span><br><span class="line">            line = scanner.nextLine();</span><br><span class="line">            <span class="keyword">if</span> (line.length() &lt; <span class="number">1</span> || line.length() &gt; limit) &#123;</span><br><span class="line">                System.out.print(<span class="string">&quot;输入长度（不大于&quot;</span> + limit + <span class="string">&quot;）错误，请重新输入：&quot;</span>);</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> line;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="12-数组"><a href="#12-数组" class="headerlink" title="12.数组"></a>12.数组</h3><p>数组属于引用数据类型，所以需要用new进行实例化，其元素可以是基本数据类型，也可以是引用数据类型。<br>创建数组对象会在内存中开辟一块连续的内存空间，而数组名引用的是这块连续空间的首地址。<br>数组的长度一旦确定，就不可以更改。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1.动态初始化</span></span><br><span class="line"><span class="type">int</span>[] arr1 = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">3</span>];</span><br><span class="line"><span class="comment">//2.静态初始化</span></span><br><span class="line"><span class="type">int</span>[] arr2 = <span class="keyword">new</span> <span class="title class_">int</span>[]&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;;</span><br><span class="line"><span class="type">String</span> <span class="variable">arr3</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>[<span class="number">3</span>];</span><br><span class="line"><span class="comment">//3.在初始化时未赋值，每个类型都会有一个默认值，例如</span></span><br><span class="line"><span class="comment">//整形默认为0，char型默认为0，String默认为null，boolean默认为false，浮点型默认为0.0</span></span><br></pre></td></tr></table></figure><h4 id="二维数组"><a href="#二维数组" class="headerlink" title="二维数组"></a>二维数组</h4><p>对于二维数组，可以简单理解为arr1作为另一个数组arr2的数组元素而存在。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1.动态初始化</span></span><br><span class="line"><span class="type">int</span>[][] arr = <span class="keyword">new</span> <span class="title class_">int</span> arr[<span class="number">11</span>][<span class="number">3</span>];</span><br><span class="line"><span class="type">int</span>[] arr1[] = <span class="keyword">new</span> <span class="title class_">int</span> arr1[<span class="number">11</span>][<span class="number">3</span>];</span><br><span class="line"><span class="type">int</span> arr2[][] = <span class="keyword">new</span> <span class="title class_">int</span> arr2[<span class="number">11</span>][<span class="number">3</span>];</span><br><span class="line"><span class="comment">//2.静态初始化</span></span><br><span class="line"><span class="type">int</span> [][] arr3 = <span class="keyword">new</span> <span class="title class_">int</span> arr3[][]&#123;&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;,&#123;<span class="number">2</span>,<span class="number">3</span>,<span class="number">6</span>&#125;,&#123;<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>&#125;&#125;;</span><br><span class="line"><span class="comment">//3.遍历二位数组</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;arr.lenght;i++)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;arr[i].length;j++)&#123;</span><br><span class="line">System.out.println(arr[i][j]+<span class="string">&quot; &quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//4.二维数组的初始化默认值</span></span><br><span class="line">System.out.println(arr);<span class="comment">//是一个地址值</span></span><br><span class="line"><span class="comment">//如果是动态初始化，且内部元素未定义长度，则会返回null</span></span><br><span class="line">System.out.println(arr[<span class="number">1</span>]);<span class="comment">//null</span></span><br></pre></td></tr></table></figure><h4 id="数组操作"><a href="#数组操作" class="headerlink" title="数组操作"></a>数组操作</h4><h5 id="杨辉三角"><a href="#杨辉三角" class="headerlink" title="杨辉三角"></a>杨辉三角</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">YangHui</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="comment">//1.声明并初始化二维数组</span></span><br><span class="line"><span class="type">int</span>[][] arr = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">10</span>][];</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=arr.length;i++) &#123;</span><br><span class="line">arr[i-<span class="number">1</span>]=<span class="keyword">new</span> <span class="title class_">int</span>[i];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//2.二维数组赋值</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;arr.length;i++) &#123;</span><br><span class="line">arr[i][<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line">arr[i][i]=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;=i;j++) &#123;</span><br><span class="line"><span class="keyword">if</span>(i&gt;<span class="number">1</span>&amp;&amp;j&gt;<span class="number">0</span>&amp;&amp;j&lt;i) &#123;</span><br><span class="line">arr[i][j]=arr[i-<span class="number">1</span>][j-<span class="number">1</span>]+arr[i-<span class="number">1</span>][j];</span><br><span class="line">&#125;</span><br><span class="line">System.out.print(arr[i][j]+<span class="string">&quot; &quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">System.out.println();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>运行结果<br><img src="/img/java_img/09.png"></p><h5 id=""><a href="#" class="headerlink" title=""></a></h5>]]></content>
      
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue</title>
      <link href="/2023/01/06/Vue/"/>
      <url>/2023/01/06/Vue/</url>
      
        <content type="html"><![CDATA[<h2 id="Vue组件化编程"><a href="#Vue组件化编程" class="headerlink" title="Vue组件化编程"></a>Vue组件化编程</h2><h3 id="模块与组件"><a href="#模块与组件" class="headerlink" title="模块与组件"></a>模块与组件</h3><h4 id="模块"><a href="#模块" class="headerlink" title="模块"></a>模块</h4><p>1.模块就是向外提供特定功能的js程序，一般就是一个js文件。<br>2.作用：复用js，简化js编程，提高js运行效率</p><h4 id="组件-组件就是一块砖，哪里需要哪里搬"><a href="#组件-组件就是一块砖，哪里需要哪里搬" class="headerlink" title="组件(组件就是一块砖，哪里需要哪里搬)"></a>组件(组件就是一块砖，哪里需要哪里搬)</h4><p>1.组件就是用来实现局部（特定）功能效果的代码集合（html、css、image…）<br>2.作用：复用编码，简化项目编码，提高运行效率</p><h3 id="非单文件组件"><a href="#非单文件组件" class="headerlink" title="非单文件组件"></a>非单文件组件</h3><p>非单文件组件：一个文件中包含n个组件</p><h4 id="Vue中使用组件的三大步骤"><a href="#Vue中使用组件的三大步骤" class="headerlink" title="Vue中使用组件的三大步骤"></a>Vue中使用组件的三大步骤</h4><h5 id="一、定义组件（创建组件）"><a href="#一、定义组件（创建组件）" class="headerlink" title="一、定义组件（创建组件）"></a>一、定义组件（创建组件）</h5><p>使用Vue.extend(options)创建，其中options和new Vue(options)时传入的那个options几乎一样，有一点区别。<br>区别如下：<br>1.el不要写，因为：最终所有的组件都要经过一个vm的管理，由vm中的el决定服务那个容器。<br>2.data必须写成函数，因为：避免组件被复用时，数据存在引用关系。<br>备注：使用template可以配置组件结构</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> school = <span class="title class_">Vue</span>.<span class="title function_">extend</span>(&#123;</span><br><span class="line">        <span class="comment">// el: &#x27;#root&#x27;,  //组件定义时，一定不要写el配置项，因为最终所有的组件都要被一个vm管理，由vm决定为那个容器服务。</span></span><br><span class="line">        <span class="attr">template</span>: <span class="string">`</span></span><br><span class="line"><span class="string">          &lt;div&gt;</span></span><br><span class="line"><span class="string">          &lt;h2&gt;学校名称：&#123;&#123; schoolName &#125;&#125;&lt;/h2&gt;</span></span><br><span class="line"><span class="string">          &lt;h2&gt;学校地址：&#123;&#123; address &#125;&#125;&lt;/h2&gt;</span></span><br><span class="line"><span class="string">          &lt;button @click=&quot;showName&quot;&gt;点我提示学校名&lt;/button&gt;</span></span><br><span class="line"><span class="string">          &lt;/div&gt;</span></span><br><span class="line"><span class="string">        `</span>,</span><br><span class="line">        <span class="title function_">data</span>(<span class="params"></span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> &#123;</span><br><span class="line">                <span class="attr">schoolName</span>: <span class="string">&#x27;河地大&#x27;</span>,</span><br><span class="line">                <span class="attr">address</span>: <span class="string">&#x27;槐底街道136号&#x27;</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">methods</span>: &#123;</span><br><span class="line">            <span class="title function_">showName</span>(<span class="params"></span>) &#123;</span><br><span class="line">                <span class="title function_">alert</span>(<span class="variable language_">this</span>.<span class="property">schoolName</span>)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br></pre></td></tr></table></figure><h5 id="二、注册组件"><a href="#二、注册组件" class="headerlink" title="二、注册组件"></a>二、注册组件</h5><p>1.局部注册：靠new Vue的时候传入components选项</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">        <span class="attr">el</span>: <span class="string">&#x27;#root&#x27;</span>,</span><br><span class="line">        <span class="comment">//第二步：注册组件（局部注册）</span></span><br><span class="line">        <span class="attr">components</span>: &#123;</span><br><span class="line">            school,</span><br><span class="line">            student</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br></pre></td></tr></table></figure><p>2.全局注册：靠Vue.component（’组件名’，组件）</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Vue</span>.<span class="title function_">component</span>(<span class="string">&#x27;hello&#x27;</span>, hello)</span><br></pre></td></tr></table></figure><h5 id="三、使用组件（写组件标签）"><a href="#三、使用组件（写组件标签）" class="headerlink" title="三、使用组件（写组件标签）"></a>三、使用组件（写组件标签）</h5><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">school</span>&gt;</span><span class="tag">&lt;/<span class="name">school</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="几个注意点"><a href="#几个注意点" class="headerlink" title="几个注意点"></a>几个注意点</h4><h5 id="关于组件名"><a href="#关于组件名" class="headerlink" title="关于组件名"></a>关于组件名</h5><p>一个单词组成：<br>第一种写法（首字母小写）：school<br>第二种写法（首字母大写）：School<br>多个单词组成：<br>第一种写法（kebab-case命名）：my-school<br>第二种写法（CamelCase命名）：MySchool（需要Vue脚手架支持）<br>备注：<br>（1）组件名尽可能回避HTML中已有的元素名称。例如：h2,H2都不行。<br>（2）可以使用name配置项制定组件在开发者工具中呈现的名字。</p><h5 id="关于组件的标签"><a href="#关于组件的标签" class="headerlink" title="关于组件的标签"></a>关于组件的标签</h5><p>第一种写法：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">school</span>&gt;</span><span class="tag">&lt;/<span class="name">school</span>&gt;</span></span><br></pre></td></tr></table></figure><p>第二种写法：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">school</span>/&gt;</span></span><br></pre></td></tr></table></figure><p>备注：不使用脚手架时，<school/>会导致后续组件不能渲染。</p><h5 id="一个简写方式"><a href="#一个简写方式" class="headerlink" title="一个简写方式"></a>一个简写方式</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> school = <span class="title class_">Vue</span>.<span class="title function_">extend</span>(options) </span><br></pre></td></tr></table></figure><p>可简写为： </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> school = options</span><br></pre></td></tr></table></figure><h4 id="组件的嵌套"><a href="#组件的嵌套" class="headerlink" title="组件的嵌套"></a>组件的嵌套</h4><p>school和hello都是组件，嵌套在app组件中</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//定义app组件</span></span><br><span class="line">    <span class="keyword">const</span> app = <span class="title class_">Vue</span>.<span class="title function_">extend</span>(&#123;</span><br><span class="line">        <span class="attr">template</span>: <span class="string">`</span></span><br><span class="line"><span class="string">          &lt;div&gt;</span></span><br><span class="line"><span class="string">          &lt;hello&gt;&lt;/hello&gt;</span></span><br><span class="line"><span class="string">          &lt;school&gt;&lt;/school&gt;</span></span><br><span class="line"><span class="string">          &lt;/div&gt;</span></span><br><span class="line"><span class="string">        `</span>,</span><br><span class="line">        <span class="attr">components</span>: &#123;</span><br><span class="line">            school,</span><br><span class="line">            hello</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br></pre></td></tr></table></figure><h4 id="VueComponent"><a href="#VueComponent" class="headerlink" title="VueComponent"></a>VueComponent</h4><ul><li>1.school组件本质是一个名为VueComponent的构造函数，且不是程序员定义的，是 Vue.extend生成的。 </li><li>2.我们只需要写<school/>或<school></school>，Vue解析时会帮我们创建school组件的实例对象。</li><li>3.特别注意：每次调用Vue.extend，返回的都是一个 全新的VueComponent!!!</li><li>4.关于this指向：</li><li>（1）组件配置中：<br>data函数，methods中的函数，watch中的函数，computed中的函数，它们的this均是【VueComponent实例对象】</li><li>（2）new Vue（）配置中<br>data函数，methods中的函数，watch中的函数，computed中的函数，它们的this均是【Vue实例对象】</li><li>5.VueComponent的实例对象，以后简称vc（也可以称之为：组件实例对象）<br>Vue的实例对象，以后简称vm<h4 id="一个重要的内置关系—-gt-VueComponent-prototype-proto-Vue-prototype"><a href="#一个重要的内置关系—-gt-VueComponent-prototype-proto-Vue-prototype" class="headerlink" title="一个重要的内置关系—&gt; VueComponent.prototype.proto===Vue.prototype"></a>一个重要的内置关系—&gt; VueComponent.prototype.<strong>proto</strong>===Vue.prototype</h4></li></ul><p>1.一个重要的内置关系：VueComponent.prototype.<strong>proto</strong>===Vue.prototype<br>2.为什么要有这个关系：让组件实例对象（vc）可以访问到Vue原型上的属性、方法。</p><h3 id="单文件组件"><a href="#单文件组件" class="headerlink" title="单文件组件"></a>单文件组件</h3><p>单文件组件：一个文件中只包含有1个组件<br>由index.html、main.js、App.vue和xxx.vue组成</p><p>入口文件main.js</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">App</span> <span class="keyword">from</span> <span class="string">&#x27;./App.vue&#x27;</span><span class="comment">//引入App父组件</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">    <span class="attr">el</span>: <span class="string">&#x27;#root&#x27;</span>,<span class="comment">//写到html中</span></span><br><span class="line">    <span class="attr">template</span>: <span class="string">`&lt;app&gt;&lt;/app&gt;`</span>,</span><br><span class="line">    <span class="attr">component</span>: &#123;</span><br><span class="line">        <span class="title class_">App</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>父组件App.vue：引入子组件</p><h2 id="脚手架"><a href="#脚手架" class="headerlink" title="脚手架"></a>脚手架</h2><h3 id="render属性"><a href="#render属性" class="headerlink" title="render属性"></a>render属性</h3><ul><li>关于不同版本的Vue：</li><li>1.Vue.js与Vue.runtime.xxx.js的区别：</li><li>  （1）Vue.js是完整版的Vue。包含：核心功能+模板解析器</li><li>  （2）Vue.runtime.xxx.js是运行版的Vue，只包含：核心功能；没有模版解析器</li><li>2.因为Vue.runtime.xxx.js没有模板解析器，所以不能使用template配置项，需要使用</li><li>render函数接收到createElement函数去指定具体内容*/<h3 id="lang-”css”与lang-”scss”"><a href="#lang-”css”与lang-”scss”" class="headerlink" title="lang=”css”与lang=”scss”"></a>lang=”css”与lang=”scss”</h3>scss需要另配插件才能使用，而css不用，可以拿来直接用<h3 id="ref属性"><a href="#ref属性" class="headerlink" title="ref属性"></a>ref属性</h3></li><li>1.被用来给元素或子组件注册引用信息（id的替代者）</li><li>2.应用在html标签上获取的是真实DOM元素，应用在组件标签上是组件实例对象（vc）</li><li>3使用方法：<ul><li>打标识：&lt;h1 ref=”xxx”…..</h1> 或<School ref="xxx"></School></li><li>获取：this.$refs.xxx<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">ref</span>=<span class="string">&quot;title&quot;</span> <span class="attr">v-text</span>=<span class="string">&quot;msg&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br></pre></td></tr></table></figure>可以通过<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">$refs</span>.<span class="property">title</span>)</span><br></pre></td></tr></table></figure>拿到DOM元素输出，结果为：<h1 data-v-7ba5bd90="">欢迎学习Vue！</h1></li></ul></li></ul><h3 id="配置项props"><a href="#配置项props" class="headerlink" title="配置项props"></a>配置项props</h3><p>功能：让组件接收外部传过来的数据。<br>(1)传递数据:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="title class_">Demo</span> name=<span class="string">&quot;xxx&quot;</span>/&gt;</span><br></pre></td></tr></table></figure><p>(2)接收数据:<br>  第一种方式（只接收）：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">props[<span class="string">&#x27;name&#x27;</span>]</span><br></pre></td></tr></table></figure><p>  第二种方式（限制类型）：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">props</span>:&#123;</span><br><span class="line">    <span class="attr">name</span>:<span class="title class_">String</span>;</span><br><span class="line">            <span class="attr">age</span>:<span class="title class_">Number</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>  第三种方式（限制类型、限制必要性、指定默认值）：<br>  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">props</span>:&#123;</span><br><span class="line">    <span class="attr">name</span>:&#123;</span><br><span class="line">      <span class="attr">type</span>:<span class="title class_">String</span>;<span class="comment">//类型</span></span><br><span class="line">      <span class="attr">required</span>: <span class="literal">true</span>;<span class="comment">//必要性</span></span><br><span class="line">      <span class="attr">default</span>:<span class="string">&#x27;老王&#x27;</span><span class="comment">//默认值</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>备注：props是只读的，Vue底层会监测你对props的修改，如果进行了修改，就会发出警告，若业务需求<br>确实需要修改，那么请复制props的内容到data中一份，然后去修改data中的数据。</p><h3 id="mixin混入（混合）"><a href="#mixin混入（混合）" class="headerlink" title="mixin混入（混合）"></a>mixin混入（混合）</h3><ol><li><p>功能：可以把多个组件共用的配置提取成一个混入对象</p></li><li><p>使用方式：</p><p>第一步定义混合：</p> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    data()&#123;....&#125;,</span><br><span class="line">    methods:&#123;....&#125;</span><br><span class="line">    ....</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>第二步使用混入：<br>全局混入：<code>Vue.mixin(xxx)</code><br>局部混入：<code>mixins:[&#39;xxx&#39;]    </code></p><h3 id="插件"><a href="#插件" class="headerlink" title="插件"></a>插件</h3></li><li><p>功能：用于增强Vue</p></li><li><p>本质：包含install方法的一个对象，install的第一个参数是Vue，第二个以后的参数是插件使用者传递的数据。</p></li><li><p>定义插件：</p> <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">对象.<span class="property">install</span> = <span class="keyword">function</span> (<span class="params">Vue, options</span>) &#123;</span><br><span class="line">    <span class="comment">// 1. 添加全局过滤器</span></span><br><span class="line">    <span class="title class_">Vue</span>.<span class="title function_">filter</span>(....)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 2. 添加全局指令</span></span><br><span class="line">    <span class="title class_">Vue</span>.<span class="title function_">directive</span>(....)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 3. 配置全局混入(合)</span></span><br><span class="line">    <span class="title class_">Vue</span>.<span class="title function_">mixin</span>(....)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 4. 添加实例方法</span></span><br><span class="line">    <span class="title class_">Vue</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">$myMethod</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;...&#125;</span><br><span class="line">    <span class="title class_">Vue</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">$myProperty</span> = xxxx</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>使用插件：<code>Vue.use()</code></p></li></ol><h3 id="总结TodoList案例"><a href="#总结TodoList案例" class="headerlink" title="总结TodoList案例"></a>总结TodoList案例</h3><ol><li><p>组件化编码流程：</p><pre><code>(1).拆分静态组件：组件要按照功能点拆分，命名不要与html元素冲突。(2).实现动态组件：考虑好数据的存放位置，数据是一个组件在用，还是一些组件在用：        1).一个组件在用：放在组件自身即可。        2). 一些组件在用：放在他们共同的父组件上（&lt;span style=&quot;color:red&quot;&gt;状态提升&lt;/span&gt;）。(3).实现交互：从绑定事件开始。</code></pre></li><li><p>props适用于：</p><pre><code>(1).父组件 ==&gt; 子组件 通信(2).子组件 ==&gt; 父组件 通信（要求父先给子一个函数）</code></pre></li><li><p>使用v-model时要切记：v-model绑定的值不能是props传过来的值，因为props是不可以修改的！</p></li><li><p>props传过来的若是对象类型的值，修改对象中的属性时Vue不会报错，但不推荐这样做。</p></li></ol><h3 id="webStorage"><a href="#webStorage" class="headerlink" title="webStorage"></a>webStorage</h3><ol><li><p>存储内容大小一般支持5MB左右（不同浏览器可能还不一样）</p></li><li><p>浏览器端通过 Window.sessionStorage 和 Window.localStorage 属性来实现本地存储机制。</p></li><li><p>相关API：</p><ol><li><p><code>xxxxxStorage.setItem(&#39;key&#39;, &#39;value&#39;);</code><br>该方法接受一个键和值作为参数，会把键值对添加到存储中，如果键名存在，则更新其对应的值。</p></li><li><p><code>xxxxxStorage.getItem(&#39;person&#39;);</code></p><p>该方法接受一个键名作为参数，返回键名对应的值。</p></li><li><p><code>xxxxxStorage.removeItem(&#39;key&#39;);</code></p><p>该方法接受一个键名作为参数，并把该键名从存储中删除。</p></li><li><p><code> xxxxxStorage.clear()</code></p><p>该方法会清空存储中的所有数据。</p></li></ol></li><li><p>备注：</p><ol><li>SessionStorage存储的内容会随着浏览器窗口关闭而消失。</li><li>LocalStorage存储的内容，需要手动清除才会消失。</li><li><code>xxxxxStorage.getItem(xxx)</code>如果xxx对应的value获取不到，那么getItem的返回值是null。</li><li><code>JSON.parse(null)</code>的结果依然是null。</li></ol></li></ol><h3 id="组件的自定义事件"><a href="#组件的自定义事件" class="headerlink" title="组件的自定义事件"></a>组件的自定义事件</h3><ol><li><p>一种组件间通信的方式，适用于：<strong style="color:red">子组件 ===&gt; 父组件</strong></p></li><li><p>使用场景：A是父组件，B是子组件，B想给A传数据，那么就要在A中给B绑定自定义事件（<span style="color:red">事件的回调在A中</span>）。</p></li><li><p>绑定自定义事件：</p><ol><li><p>第一种方式，在父组件中：<code>&lt;Demo @atguigu=&quot;test&quot;/&gt;</code>  或 <code>&lt;Demo v-on:atguigu=&quot;test&quot;/&gt;</code></p></li><li><p>第二种方式，在父组件中：</p> <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="title class_">Demo</span> ref=<span class="string">&quot;demo&quot;</span>/&gt;</span><br><span class="line">......</span><br><span class="line"><span class="title function_">mounted</span>(<span class="params"></span>)&#123;</span><br><span class="line">   <span class="variable language_">this</span>.<span class="property">$refs</span>.<span class="property">xxx</span>.$on(<span class="string">&#x27;atguigu&#x27;</span>,<span class="variable language_">this</span>.<span class="property">test</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>若想让自定义事件只能触发一次，可以使用<code>once</code>修饰符，或<code>$once</code>方法。</p></li></ol></li><li><p>触发自定义事件：<code>this.$emit(&#39;atguigu&#39;,数据)</code></p></li><li><p>解绑自定义事件<code>this.$off(&#39;atguigu&#39;)</code></p></li><li><p>组件上也可以绑定原生DOM事件，需要使用<code>native</code>修饰符。</p></li><li><p>注意：通过<code>this.$refs.xxx.$on(&#39;atguigu&#39;,回调)</code>绑定自定义事件时，回调<span style="color:red">要么配置在methods中</span>，<span style="color:red">要么用箭头函数</span>，否则this指向会出问题！</p></li></ol><h3 id="全局事件总线（GlobalEventBus）"><a href="#全局事件总线（GlobalEventBus）" class="headerlink" title="全局事件总线（GlobalEventBus）"></a>全局事件总线（GlobalEventBus）</h3><ol><li><p>一种组件间通信的方式，适用于<span style="color:red">任意组件间通信</span>。</p></li><li><p>安装全局事件总线：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">......</span><br><span class="line"><span class="title function_">beforeCreate</span>(<span class="params"></span>) &#123;</span><br><span class="line"><span class="title class_">Vue</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">$bus</span> = <span class="variable language_">this</span> <span class="comment">//安装全局事件总线，$bus就是当前应用的vm</span></span><br><span class="line">&#125;,</span><br><span class="line">    ......</span><br><span class="line">&#125;) </span><br></pre></td></tr></table></figure></li><li><p>使用事件总线：</p><ol><li><p>接收数据：A组件想接收数据，则在A组件中给$bus绑定自定义事件，事件的<span style="color:red">回调留在A组件自身。</span></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">methods</span>(<span class="params"></span>)&#123;</span><br><span class="line">  <span class="title function_">demo</span>(<span class="params">data</span>)&#123;......&#125;</span><br><span class="line">&#125;</span><br><span class="line">......</span><br><span class="line"><span class="title function_">mounted</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">$bus</span>.$on(<span class="string">&#x27;xxxx&#x27;</span>,<span class="variable language_">this</span>.<span class="property">demo</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>提供数据：<code>this.$bus.$emit(&#39;xxxx&#39;,数据)</code></p></li></ol></li><li><p>最好在beforeDestroy钩子中，用$off去解绑<span style="color:red">当前组件所用到的</span>事件。</p></li></ol><h3 id="消息订阅与发布（pubsub）"><a href="#消息订阅与发布（pubsub）" class="headerlink" title="消息订阅与发布（pubsub）"></a>消息订阅与发布（pubsub）</h3><ol><li><p>  一种组件间通信的方式，适用于<span style="color:red">任意组件间通信</span>。</p></li><li><p>使用步骤：</p><ol><li><p>安装pubsub：<code>npm i pubsub-js</code></p></li><li><p>引入: <code>import pubsub from &#39;pubsub-js&#39;</code></p></li><li><p>接收数据：A组件想接收数据，则在A组件中订阅消息，订阅的<span style="color:red">回调留在A组件自身。</span></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">methods</span>(<span class="params"></span>)&#123;</span><br><span class="line">  <span class="title function_">demo</span>(<span class="params">data</span>)&#123;......&#125;</span><br><span class="line">&#125;</span><br><span class="line">......</span><br><span class="line"><span class="title function_">mounted</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">pid</span> = pubsub.<span class="title function_">subscribe</span>(<span class="string">&#x27;xxx&#x27;</span>,<span class="variable language_">this</span>.<span class="property">demo</span>) <span class="comment">//订阅消息</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>提供数据：<code>pubsub.publish(&#39;xxx&#39;,数据)</code></p></li><li><p>最好在beforeDestroy钩子中，用<code>PubSub.unsubscribe(pid)</code>去<span style="color:red">取消订阅。</span></p></li></ol></li></ol><h3 id="nextTick"><a href="#nextTick" class="headerlink" title="nextTick"></a>nextTick</h3><ol><li>语法：<code>this.$nextTick(回调函数)</code></li><li>作用：在下一次 DOM 更新结束后执行其指定的回调。</li><li>什么时候用：当改变数据后，要基于更新后的新DOM进行某些操作时，要在nextTick所指定的回调函数中执行。</li></ol><h3 id="Vue封装的过度与动画"><a href="#Vue封装的过度与动画" class="headerlink" title="Vue封装的过度与动画"></a>Vue封装的过度与动画</h3><ol><li><p>作用：在插入、更新或移除 DOM元素时，在合适的时候给元素添加样式类名。</p></li><li><p>图示：<img src="https://img04.sogoucdn.com/app/a/100520146/5990c1dff7dc7a8fb3b34b4462bd0105" style="width:60%" /></p></li><li><p>写法：</p><ol><li><p>准备好样式：</p><ul><li>元素进入的样式：<ol><li>v-enter：进入的起点</li><li>v-enter-active：进入过程中</li><li>v-enter-to：进入的终点</li></ol></li><li>元素离开的样式：<ol><li>v-leave：离开的起点</li><li>v-leave-active：离开过程中</li><li>v-leave-to：离开的终点</li></ol></li></ul></li><li><p>使用<code>&lt;transition&gt;</code>包裹要过度的元素，并配置name属性：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;transition name=&quot;hello&quot;&gt;</span><br><span class="line">    &lt;h1 v-show=&quot;isShow&quot;&gt;你好啊！&lt;/h1&gt;</span><br><span class="line">&lt;/transition&gt;</span><br></pre></td></tr></table></figure></li><li><p>备注：若有多个元素需要过度，则需要使用：<code>&lt;transition-group&gt;</code>，且每个元素都要指定<code>key</code>值。</p></li></ol></li></ol><h3 id="vue脚手架配置代理"><a href="#vue脚手架配置代理" class="headerlink" title="vue脚手架配置代理"></a>vue脚手架配置代理</h3><h4 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h4><p>​    在vue.config.js中添加如下配置：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">devServer</span>:&#123;</span><br><span class="line">  <span class="attr">proxy</span>:<span class="string">&quot;http://localhost:5000&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>说明：</p><ol><li>优点：配置简单，请求资源时直接发给前端（8080）即可。</li><li>缺点：不能配置多个代理，不能灵活的控制请求是否走代理。</li><li>工作方式：若按照上述配置代理，当请求了前端不存在的资源时，那么该请求会转发给服务器 （优先匹配前端资源）</li></ol><h4 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h4><p>​    编写vue.config.js配置具体代理规则：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line"><span class="attr">devServer</span>: &#123;</span><br><span class="line">      <span class="attr">proxy</span>: &#123;</span><br><span class="line">      <span class="string">&#x27;/api1&#x27;</span>: &#123;<span class="comment">// 匹配所有以 &#x27;/api1&#x27;开头的请求路径</span></span><br><span class="line">        <span class="attr">target</span>: <span class="string">&#x27;http://localhost:5000&#x27;</span>,<span class="comment">// 代理目标的基础路径</span></span><br><span class="line">        <span class="attr">changeOrigin</span>: <span class="literal">true</span>,</span><br><span class="line">        <span class="attr">pathRewrite</span>: &#123;<span class="string">&#x27;^/api1&#x27;</span>: <span class="string">&#x27;&#x27;</span>&#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="string">&#x27;/api2&#x27;</span>: &#123;<span class="comment">// 匹配所有以 &#x27;/api2&#x27;开头的请求路径</span></span><br><span class="line">        <span class="attr">target</span>: <span class="string">&#x27;http://localhost:5001&#x27;</span>,<span class="comment">// 代理目标的基础路径</span></span><br><span class="line">        <span class="attr">changeOrigin</span>: <span class="literal">true</span>,</span><br><span class="line">        <span class="attr">pathRewrite</span>: &#123;<span class="string">&#x27;^/api2&#x27;</span>: <span class="string">&#x27;&#x27;</span>&#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">   changeOrigin设置为true时，服务器收到的请求头中的host为：localhost:5000</span></span><br><span class="line"><span class="comment">   changeOrigin设置为false时，服务器收到的请求头中的host为：localhost:8080</span></span><br><span class="line"><span class="comment">   changeOrigin默认值为true</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p>说明：</p><ol><li>优点：可以配置多个代理，且可以灵活的控制请求是否走代理。</li><li>缺点：配置略微繁琐，请求资源时必须加前缀。</li></ol><h3 id="插槽"><a href="#插槽" class="headerlink" title="插槽"></a>插槽</h3><ol><li><p>作用：让父组件可以向子组件指定位置插入html结构，也是一种组件间通信的方式，适用于 <strong style="color:red">父组件 ===&gt; 子组件</strong> 。</p></li><li><p>分类：默认插槽、具名插槽、作用域插槽</p></li><li><p>使用方式：</p><ol><li><p>默认插槽：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">父组件中：</span><br><span class="line">        &lt;Category&gt;</span><br><span class="line">           &lt;div&gt;html结构1&lt;/div&gt;</span><br><span class="line">        &lt;/Category&gt;</span><br><span class="line">子组件中：</span><br><span class="line">        &lt;template&gt;</span><br><span class="line">            &lt;div&gt;</span><br><span class="line">               &lt;!-- 定义插槽 --&gt;</span><br><span class="line">               &lt;slot&gt;插槽默认内容...&lt;/slot&gt;</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">        &lt;/template&gt;</span><br></pre></td></tr></table></figure></li><li><p>具名插槽：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">父组件中：</span><br><span class="line">        &lt;Category&gt;</span><br><span class="line">            &lt;template slot=&quot;center&quot;&gt;</span><br><span class="line">              &lt;div&gt;html结构1&lt;/div&gt;</span><br><span class="line">            &lt;/template&gt;</span><br><span class="line"></span><br><span class="line">            &lt;template v-slot:footer&gt;</span><br><span class="line">               &lt;div&gt;html结构2&lt;/div&gt;</span><br><span class="line">            &lt;/template&gt;</span><br><span class="line">        &lt;/Category&gt;</span><br><span class="line">子组件中：</span><br><span class="line">        &lt;template&gt;</span><br><span class="line">            &lt;div&gt;</span><br><span class="line">               &lt;!-- 定义插槽 --&gt;</span><br><span class="line">               &lt;slot name=&quot;center&quot;&gt;插槽默认内容...&lt;/slot&gt;</span><br><span class="line">               &lt;slot name=&quot;footer&quot;&gt;插槽默认内容...&lt;/slot&gt;</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">        &lt;/template&gt;</span><br></pre></td></tr></table></figure></li><li><p>作用域插槽：</p><ol><li><p>理解：<span style="color:red">数据在组件的自身，但根据数据生成的结构需要组件的使用者来决定。</span>（games数据在Category组件中，但使用数据所遍历出来的结构由App组件决定）</p></li><li><p>具体编码：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">父组件中：</span><br><span class="line">        &lt;Category&gt;</span><br><span class="line">            &lt;template scope=&quot;scopeData&quot;&gt;</span><br><span class="line">                &lt;!-- 生成的是ul列表 --&gt;</span><br><span class="line">                &lt;ul&gt;</span><br><span class="line">                    &lt;li v-for=&quot;g in scopeData.games&quot; :key=&quot;g&quot;&gt;&#123;&#123;g&#125;&#125;&lt;/li&gt;</span><br><span class="line">                &lt;/ul&gt;</span><br><span class="line">            &lt;/template&gt;</span><br><span class="line">        &lt;/Category&gt;</span><br><span class="line"></span><br><span class="line">        &lt;Category&gt;</span><br><span class="line">            &lt;template slot-scope=&quot;scopeData&quot;&gt;</span><br><span class="line">                &lt;!-- 生成的是h4标题 --&gt;</span><br><span class="line">                &lt;h4 v-for=&quot;g in scopeData.games&quot; :key=&quot;g&quot;&gt;&#123;&#123;g&#125;&#125;&lt;/h4&gt;</span><br><span class="line">            &lt;/template&gt;</span><br><span class="line">        &lt;/Category&gt;</span><br><span class="line">子组件中：</span><br><span class="line">        &lt;template&gt;</span><br><span class="line">            &lt;div&gt;</span><br><span class="line">                &lt;slot :games=&quot;games&quot;&gt;&lt;/slot&gt;</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">        &lt;/template&gt;</span><br><span class="line">        </span><br><span class="line">        &lt;script&gt;</span><br><span class="line">            export default &#123;</span><br><span class="line">                name:&#x27;Category&#x27;,</span><br><span class="line">                props:[&#x27;title&#x27;],</span><br><span class="line">                //数据在子组件自身</span><br><span class="line">                data() &#123;</span><br><span class="line">                    return &#123;</span><br><span class="line">                        games:[&#x27;红色警戒&#x27;,&#x27;穿越火线&#x27;,&#x27;劲舞团&#x27;,&#x27;超级玛丽&#x27;]</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;,</span><br><span class="line">            &#125;</span><br><span class="line">        &lt;/script&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">   </span><br></pre></td></tr></table></figure></li></ol></li></ol></li></ol><h2 id="Vuex"><a href="#Vuex" class="headerlink" title="Vuex"></a>Vuex</h2><h3 id="1-概念"><a href="#1-概念" class="headerlink" title="1.概念"></a>1.概念</h3><pre><code>    在Vue中实现集中式状态（数据）管理的一个Vue插件，对vue应用中多个组件的共享状态进行集中式的管理（读/写），也是一种组件间通信的方式，且适用于任意组件间通信。</code></pre><h3 id="2-何时使用？"><a href="#2-何时使用？" class="headerlink" title="2.何时使用？"></a>2.何时使用？</h3><pre><code>    多个组件需要共享数据时</code></pre><h3 id="3-搭建vuex环境"><a href="#3-搭建vuex环境" class="headerlink" title="3.搭建vuex环境"></a>3.搭建vuex环境</h3><ol><li><p>创建文件：<code>src/store/index.js</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//引入Vue核心库</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Vue</span> <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="comment">//引入Vuex</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Vuex</span> <span class="keyword">from</span> <span class="string">&#x27;vuex&#x27;</span></span><br><span class="line"><span class="comment">//应用Vuex插件</span></span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">use</span>(<span class="title class_">Vuex</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">//准备actions对象——响应组件中用户的动作</span></span><br><span class="line"><span class="keyword">const</span> actions = &#123;&#125;</span><br><span class="line"><span class="comment">//准备mutations对象——修改state中的数据</span></span><br><span class="line"><span class="keyword">const</span> mutations = &#123;&#125;</span><br><span class="line"><span class="comment">//准备state对象——保存具体的数据</span></span><br><span class="line"><span class="keyword">const</span> state = &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建并暴露store</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> <span class="title class_">Vuex</span>.<span class="title class_">Store</span>(&#123;</span><br><span class="line">actions,</span><br><span class="line">mutations,</span><br><span class="line">state</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li><li><p>在<code>main.js</code>中创建vm时传入<code>store</code>配置项</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">......</span><br><span class="line"><span class="comment">//引入store</span></span><br><span class="line"><span class="keyword">import</span> store <span class="keyword">from</span> <span class="string">&#x27;./store&#x27;</span></span><br><span class="line">......</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建vm</span></span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line"><span class="attr">el</span>:<span class="string">&#x27;#app&#x27;</span>,</span><br><span class="line"><span class="attr">render</span>: <span class="function"><span class="params">h</span> =&gt;</span> <span class="title function_">h</span>(<span class="title class_">App</span>),</span><br><span class="line">store</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li></ol><h3 id="4-基本使用"><a href="#4-基本使用" class="headerlink" title="4.基本使用"></a>4.基本使用</h3><ol><li>初始化数据、配置<code>actions</code>、配置<code>mutations</code>，操作文件<code>store.js</code><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//引入Vue核心库</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Vue</span> <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="comment">//引入Vuex</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Vuex</span> <span class="keyword">from</span> <span class="string">&#x27;vuex&#x27;</span></span><br><span class="line"><span class="comment">//引用Vuex</span></span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">use</span>(<span class="title class_">Vuex</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> actions = &#123;</span><br><span class="line">    <span class="comment">//响应组件中加的动作</span></span><br><span class="line"><span class="title function_">jia</span>(<span class="params">context,value</span>)&#123;</span><br><span class="line"><span class="comment">// console.log(&#x27;actions中的jia被调用了&#x27;,miniStore,value)</span></span><br><span class="line">context.<span class="title function_">commit</span>(<span class="string">&#x27;JIA&#x27;</span>,value)</span><br><span class="line">&#125;,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> mutations = &#123;</span><br><span class="line">    <span class="comment">//执行加</span></span><br><span class="line"><span class="title function_">JIA</span>(<span class="params">state,value</span>)&#123;</span><br><span class="line"><span class="comment">// console.log(&#x27;mutations中的JIA被调用了&#x27;,state,value)</span></span><br><span class="line">state.<span class="property">sum</span> += value</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//初始化数据</span></span><br><span class="line"><span class="keyword">const</span> state = &#123;</span><br><span class="line">   <span class="attr">sum</span>:<span class="number">0</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建并暴露store</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> <span class="title class_">Vuex</span>.<span class="title class_">Store</span>(&#123;</span><br><span class="line">actions,</span><br><span class="line">mutations,</span><br><span class="line">state,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li></ol><p><code>javascript</code><br>2. 组件中读取vuex中的数据：<code>$store.state.sum</code></p><ol start="3"><li><p>组件中修改vuex中的数据：<code>$store.dispatch(&#39;action中的方法名&#39;,数据)</code> 或 <code>$store.commit(&#39;mutations中的方法名&#39;,数据)</code></p><blockquote><p> 备注：若没有网络请求或其他业务逻辑，组件中也可以越过actions，即不写<code>dispatch</code>，直接编写<code>commit</code></p></blockquote></li></ol><h3 id="5-getters的使用"><a href="#5-getters的使用" class="headerlink" title="5.getters的使用"></a>5.getters的使用</h3><ol><li><p>概念：当state中的数据需要经过加工后再使用时，可以使用getters加工。</p></li><li><p>在<code>store.js</code>中追加<code>getters</code>配置</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">......</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> getters = &#123;</span><br><span class="line"><span class="title function_">bigSum</span>(<span class="params">state</span>)&#123;</span><br><span class="line"><span class="keyword">return</span> state.<span class="property">sum</span> * <span class="number">10</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建并暴露store</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> <span class="title class_">Vuex</span>.<span class="title class_">Store</span>(&#123;</span><br><span class="line">......</span><br><span class="line">getters</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li><li><p>组件中读取数据：<code>$store.getters.bigSum</code></p></li></ol><h3 id="6-四个map方法的使用"><a href="#6-四个map方法的使用" class="headerlink" title="6.四个map方法的使用"></a>6.四个map方法的使用</h3><ol><li><p><strong>mapState方法：</strong>用于帮助我们映射<code>state</code>中的数据为计算属性</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">computed</span>: &#123;</span><br><span class="line">    <span class="comment">//借助mapState生成计算属性：sum、school、subject（对象写法）</span></span><br><span class="line">     ...<span class="title function_">mapState</span>(&#123;<span class="attr">sum</span>:<span class="string">&#x27;sum&#x27;</span>,<span class="attr">school</span>:<span class="string">&#x27;school&#x27;</span>,<span class="attr">subject</span>:<span class="string">&#x27;subject&#x27;</span>&#125;),</span><br><span class="line">         </span><br><span class="line">    <span class="comment">//借助mapState生成计算属性：sum、school、subject（数组写法）</span></span><br><span class="line">    ...<span class="title function_">mapState</span>([<span class="string">&#x27;sum&#x27;</span>,<span class="string">&#x27;school&#x27;</span>,<span class="string">&#x27;subject&#x27;</span>]),</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure></li><li><p><strong>mapGetters方法：</strong>用于帮助我们映射<code>getters</code>中的数据为计算属性</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">computed</span>: &#123;</span><br><span class="line">    <span class="comment">//借助mapGetters生成计算属性：bigSum（对象写法）</span></span><br><span class="line">    ...<span class="title function_">mapGetters</span>(&#123;<span class="attr">bigSum</span>:<span class="string">&#x27;bigSum&#x27;</span>&#125;),</span><br><span class="line"></span><br><span class="line">    <span class="comment">//借助mapGetters生成计算属性：bigSum（数组写法）</span></span><br><span class="line">    ...<span class="title function_">mapGetters</span>([<span class="string">&#x27;bigSum&#x27;</span>])</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure></li><li><p><strong>mapActions方法：</strong>用于帮助我们生成与<code>actions</code>对话的方法，即：包含<code>$store.dispatch(xxx)</code>的函数</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">methods</span>:&#123;</span><br><span class="line"><span class="comment">//靠mapActions生成：incrementOdd、incrementWait（对象形式）</span></span><br><span class="line">...<span class="title function_">mapActions</span>(&#123;<span class="attr">incrementOdd</span>:<span class="string">&#x27;jiaOdd&#x27;</span>,<span class="attr">incrementWait</span>:<span class="string">&#x27;jiaWait&#x27;</span>&#125;)</span><br><span class="line"></span><br><span class="line">       <span class="comment">//靠mapActions生成：incrementOdd、incrementWait（数组形式）</span></span><br><span class="line">       ...<span class="title function_">mapActions</span>([<span class="string">&#x27;jiaOdd&#x27;</span>,<span class="string">&#x27;jiaWait&#x27;</span>])</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>mapMutations方法：</strong>用于帮助我们生成与<code>mutations</code>对话的方法，即：包含<code>$store.commit(xxx)</code>的函数</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">methods</span>:&#123;</span><br><span class="line">    <span class="comment">//靠mapActions生成：increment、decrement（对象形式）</span></span><br><span class="line">    ...<span class="title function_">mapMutations</span>(&#123;<span class="attr">increment</span>:<span class="string">&#x27;JIA&#x27;</span>,<span class="attr">decrement</span>:<span class="string">&#x27;JIAN&#x27;</span>&#125;),</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//靠mapMutations生成：JIA、JIAN（对象形式）</span></span><br><span class="line">    ...<span class="title function_">mapMutations</span>([<span class="string">&#x27;JIA&#x27;</span>,<span class="string">&#x27;JIAN&#x27;</span>]),</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><blockquote><p>备注：mapActions与mapMutations使用时，若需要传递参数需要：在模板中绑定事件时传递好参数，否则参数是事件对象。</p></blockquote><h3 id="7-模块化-命名空间"><a href="#7-模块化-命名空间" class="headerlink" title="7.模块化+命名空间"></a>7.模块化+命名空间</h3><ol><li><p>目的：让代码更好维护，让多种数据分类更加明确。</p></li><li><p>修改<code>store.js</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> countAbout = &#123;</span><br><span class="line">  <span class="attr">namespaced</span>:<span class="literal">true</span>,<span class="comment">//开启命名空间</span></span><br><span class="line">  <span class="attr">state</span>:&#123;<span class="attr">x</span>:<span class="number">1</span>&#125;,</span><br><span class="line">  <span class="attr">mutations</span>: &#123; ... &#125;,</span><br><span class="line">  <span class="attr">actions</span>: &#123; ... &#125;,</span><br><span class="line">  <span class="attr">getters</span>: &#123;</span><br><span class="line">    <span class="title function_">bigSum</span>(<span class="params">state</span>)&#123;</span><br><span class="line">       <span class="keyword">return</span> state.<span class="property">sum</span> * <span class="number">10</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> personAbout = &#123;</span><br><span class="line">  <span class="attr">namespaced</span>:<span class="literal">true</span>,<span class="comment">//开启命名空间</span></span><br><span class="line">  <span class="attr">state</span>:&#123; ... &#125;,</span><br><span class="line">  <span class="attr">mutations</span>: &#123; ... &#125;,</span><br><span class="line">  <span class="attr">actions</span>: &#123; ... &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> store = <span class="keyword">new</span> <span class="title class_">Vuex</span>.<span class="title class_">Store</span>(&#123;</span><br><span class="line">  <span class="attr">modules</span>: &#123;</span><br><span class="line">    countAbout,</span><br><span class="line">    personAbout</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li><li><p>开启命名空间后，组件中读取state数据：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//方式一：自己直接读取</span></span><br><span class="line"><span class="variable language_">this</span>.<span class="property">$store</span>.<span class="property">state</span>.<span class="property">personAbout</span>.<span class="property">list</span></span><br><span class="line"><span class="comment">//方式二：借助mapState读取：</span></span><br><span class="line">...<span class="title function_">mapState</span>(<span class="string">&#x27;countAbout&#x27;</span>,[<span class="string">&#x27;sum&#x27;</span>,<span class="string">&#x27;school&#x27;</span>,<span class="string">&#x27;subject&#x27;</span>]),</span><br></pre></td></tr></table></figure></li><li><p>开启命名空间后，组件中读取getters数据：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//方式一：自己直接读取</span></span><br><span class="line"><span class="variable language_">this</span>.<span class="property">$store</span>.<span class="property">getters</span>[<span class="string">&#x27;personAbout/firstPersonName&#x27;</span>]</span><br><span class="line"><span class="comment">//方式二：借助mapGetters读取：</span></span><br><span class="line">...<span class="title function_">mapGetters</span>(<span class="string">&#x27;countAbout&#x27;</span>,[<span class="string">&#x27;bigSum&#x27;</span>])</span><br></pre></td></tr></table></figure></li><li><p>开启命名空间后，组件中调用dispatch</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//方式一：自己直接dispatch</span></span><br><span class="line"><span class="variable language_">this</span>.<span class="property">$store</span>.<span class="title function_">dispatch</span>(<span class="string">&#x27;personAbout/addPersonWang&#x27;</span>,person)</span><br><span class="line"><span class="comment">//方式二：借助mapActions：</span></span><br><span class="line">...<span class="title function_">mapActions</span>(<span class="string">&#x27;countAbout&#x27;</span>,&#123;<span class="attr">incrementOdd</span>:<span class="string">&#x27;jiaOdd&#x27;</span>,<span class="attr">incrementWait</span>:<span class="string">&#x27;jiaWait&#x27;</span>&#125;)</span><br></pre></td></tr></table></figure></li><li><p>开启命名空间后，组件中调用commit</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//方式一：自己直接commit</span></span><br><span class="line"><span class="variable language_">this</span>.<span class="property">$store</span>.<span class="title function_">commit</span>(<span class="string">&#x27;personAbout/ADD_PERSON&#x27;</span>,person)</span><br><span class="line"><span class="comment">//方式二：借助mapMutations：</span></span><br><span class="line">...<span class="title function_">mapMutations</span>(<span class="string">&#x27;countAbout&#x27;</span>,&#123;<span class="attr">increment</span>:<span class="string">&#x27;JIA&#x27;</span>,<span class="attr">decrement</span>:<span class="string">&#x27;JIAN&#x27;</span>&#125;),</span><br></pre></td></tr></table></figure></li></ol><h2 id="路由"><a href="#路由" class="headerlink" title="路由"></a>路由</h2><ol><li>理解： 一个路由（route）就是一组映射关系（key - value），多个路由需要路由器（router）进行管理。</li><li>前端路由：key是路径，value是组件。</li></ol><h3 id="1-基本使用"><a href="#1-基本使用" class="headerlink" title="1.基本使用"></a>1.基本使用</h3><ol><li><p>安装vue-router，命令：<code>npm i vue-router</code></p></li><li><p>应用插件：<code>Vue.use(VueRouter)</code></p></li><li><p>编写router配置项:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//引入VueRouter</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">VueRouter</span> <span class="keyword">from</span> <span class="string">&#x27;vue-router&#x27;</span></span><br><span class="line"><span class="comment">//引入Luyou 组件</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">About</span> <span class="keyword">from</span> <span class="string">&#x27;../components/About&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Home</span> <span class="keyword">from</span> <span class="string">&#x27;../components/Home&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//创建router实例对象，去管理一组一组的路由规则</span></span><br><span class="line"><span class="keyword">const</span> router = <span class="keyword">new</span> <span class="title class_">VueRouter</span>(&#123;</span><br><span class="line"><span class="attr">routes</span>:[</span><br><span class="line">&#123;</span><br><span class="line"><span class="attr">path</span>:<span class="string">&#x27;/about&#x27;</span>,</span><br><span class="line"><span class="attr">component</span>:<span class="title class_">About</span></span><br><span class="line">&#125;,</span><br><span class="line">&#123;</span><br><span class="line"><span class="attr">path</span>:<span class="string">&#x27;/home&#x27;</span>,</span><br><span class="line"><span class="attr">component</span>:<span class="title class_">Home</span></span><br><span class="line">&#125;</span><br><span class="line">]</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//暴露router</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> router</span><br></pre></td></tr></table></figure></li><li><p>实现切换（active-class可配置高亮样式）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;router-link active-class=&quot;active&quot; to=&quot;/about&quot;&gt;About&lt;/router-link&gt;</span><br></pre></td></tr></table></figure></li><li><p>指定展示位置</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;router-view&gt;&lt;/router-view&gt;</span><br></pre></td></tr></table></figure></li></ol><p>741</p>]]></content>
      
      
      
        <tags>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ES6新特性</title>
      <link href="/2022/12/06/ES6%E6%96%B0%E7%89%B9%E6%80%A7/"/>
      <url>/2022/12/06/ES6%E6%96%B0%E7%89%B9%E6%80%A7/</url>
      
        <content type="html"><![CDATA[<h2 id="一、ES6中新增的let与var的区别："><a href="#一、ES6中新增的let与var的区别：" class="headerlink" title="一、ES6中新增的let与var的区别："></a>一、ES6中新增的let与var的区别：</h2><h3 id="1-用let声明变量的时候不可以重复声明，但是var可以。"><a href="#1-用let声明变量的时候不可以重复声明，但是var可以。" class="headerlink" title="1.用let声明变量的时候不可以重复声明，但是var可以。"></a>1.用let声明变量的时候不可以重复声明，但是var可以。</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> a=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">let</span> a=<span class="number">1</span>;  <span class="comment">//会报错</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> b=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">var</span> b=<span class="number">1</span>;  <span class="comment">//不会报错</span></span><br></pre></td></tr></table></figure><h3 id="2-新增了块级作用域，可以只在代码块中起作用，外部访问不到。其他的还有全局作用域、函数作用域、eval与var保持一致。"><a href="#2-新增了块级作用域，可以只在代码块中起作用，外部访问不到。其他的还有全局作用域、函数作用域、eval与var保持一致。" class="headerlink" title="2.新增了块级作用域，可以只在代码块中起作用，外部访问不到。其他的还有全局作用域、函数作用域、eval与var保持一致。"></a>2.新增了块级作用域，可以只在代码块中起作用，外部访问不到。其他的还有全局作用域、函数作用域、eval与var保持一致。</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="keyword">let</span> a=<span class="number">6</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a);  <span class="comment">//会报错</span></span><br></pre></td></tr></table></figure><h3 id="3-let不存在变量提升的特性，这点与var不同。"><a href="#3-let不存在变量提升的特性，这点与var不同。" class="headerlink" title="3.let不存在变量提升的特性，这点与var不同。"></a>3.let不存在变量提升的特性，这点与var不同。</h3><h3 id="4-不影响作用域链。"><a href="#4-不影响作用域链。" class="headerlink" title="4.不影响作用域链。"></a>4.不影响作用域链。</h3><h2 id="二、Const常量"><a href="#二、Const常量" class="headerlink" title="二、Const常量"></a>二、Const常量</h2><h3 id="1-定义常量的时候一定要赋初始值"><a href="#1-定义常量的时候一定要赋初始值" class="headerlink" title="1.定义常量的时候一定要赋初始值"></a>1.定义常量的时候一定要赋初始值</h3><h3 id="2-常量的变量名一般都要大写（习惯）"><a href="#2-常量的变量名一般都要大写（习惯）" class="headerlink" title="2.常量的变量名一般都要大写（习惯）"></a>2.常量的变量名一般都要大写（习惯）</h3><h3 id="3-常量，顾名思义，它的值是不可更改的"><a href="#3-常量，顾名思义，它的值是不可更改的" class="headerlink" title="3.常量，顾名思义，它的值是不可更改的"></a>3.常量，顾名思义，它的值是不可更改的</h3><h3 id="4-与新增的let一样，也是块级作用域"><a href="#4-与新增的let一样，也是块级作用域" class="headerlink" title="4.与新增的let一样，也是块级作用域"></a>4.与新增的let一样，也是块级作用域</h3><h3 id="5-如果定义数组或者对象为常量，对其元素进行修改则不会报错"><a href="#5-如果定义数组或者对象为常量，对其元素进行修改则不会报错" class="headerlink" title="5.如果定义数组或者对象为常量，对其元素进行修改则不会报错"></a>5.如果定义数组或者对象为常量，对其元素进行修改则不会报错</h3><p>原因：因为修改其中的元素并不会导致该数组或对象的地址发生改变，所以不会报错。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="variable constant_">TEAM</span> = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>];</span><br><span class="line"><span class="variable constant_">TEAM</span>.<span class="title function_">push</span>(<span class="number">4</span>);  <span class="comment">//不会报错</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//但是如果进行如下修改就会报错了</span></span><br><span class="line"><span class="variable constant_">TEAM</span> = <span class="number">1</span>；  <span class="comment">//报错</span></span><br></pre></td></tr></table></figure><h2 id="三、数组和对象的解构赋值"><a href="#三、数组和对象的解构赋值" class="headerlink" title="三、数组和对象的解构赋值"></a>三、数组和对象的解构赋值</h2><p>  ES6允许按照一定模式从数组和对象中提取值，对变量进行赋值，就称为解构赋值。</p><h3 id="1-数组的解构赋值"><a href="#1-数组的解构赋值" class="headerlink" title="1.数组的解构赋值"></a>1.数组的解构赋值</h3><p>  按照顺序进行一一对应进行赋值。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="variable constant_">F4</span> = [<span class="string">&#x27;小杰&#x27;</span>,<span class="string">&#x27;小民&#x27;</span>,<span class="string">&#x27;小蔡&#x27;</span>,<span class="string">&#x27;小红&#x27;</span>];</span><br><span class="line"><span class="keyword">let</span> [li,wang,cai,yu] = <span class="variable constant_">F4</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(li);  <span class="comment">//小杰</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(wang);  <span class="comment">//小民</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(cai);  <span class="comment">//小蔡</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(yu);  <span class="comment">//小红</span></span><br></pre></td></tr></table></figure><h3 id="2-对象的解构赋值"><a href="#2-对象的解构赋值" class="headerlink" title="2.对象的解构赋值"></a>2.对象的解构赋值</h3><p>  按照属性名进行赋值。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="variable constant_">LI</span> = &#123;</span><br><span class="line">    <span class="attr">name</span>:<span class="string">&#x27;小杰&#x27;</span>,</span><br><span class="line">    <span class="attr">age</span>: <span class="number">22</span>,</span><br><span class="line">    <span class="attr">apex</span>: <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;我是APEX猎杀&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> &#123;name, age, apex&#125; = <span class="variable constant_">LI</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(name);  <span class="comment">//小杰</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(age);  <span class="comment">//22</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(apex);  <span class="comment">//f()=&#123;console.log(我是APEX猎杀)&#125;</span></span><br><span class="line"><span class="title function_">apex</span>();  <span class="comment">//我是APEX猎杀</span></span><br></pre></td></tr></table></figure><h2 id="四、新增的字符串字面量："><a href="#四、新增的字符串字面量：" class="headerlink" title="四、新增的字符串字面量：``"></a>四、新增的字符串字面量：``</h2><h3 id="1-新的字符串声明方式"><a href="#1-新的字符串声明方式" class="headerlink" title="1.新的字符串声明方式"></a>1.新的字符串声明方式</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> str1 = <span class="string">`我是新增的字符串字面量`</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(str1, <span class="keyword">typeof</span> str1);  <span class="comment">//我是新增的字符串字面量 String</span></span><br></pre></td></tr></table></figure><h3 id="2-内容中可以出现换行符，其他的不支持"><a href="#2-内容中可以出现换行符，其他的不支持" class="headerlink" title="2.内容中可以出现换行符，其他的不支持"></a>2.内容中可以出现换行符，其他的不支持</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> str2=<span class="string">`&lt;ul&gt;</span></span><br><span class="line"><span class="string">                &lt;li&gt;小红&lt;/li&gt;</span></span><br><span class="line"><span class="string">                &lt;li&gt;小杰&lt;/li&gt;</span></span><br><span class="line"><span class="string">                &lt;li&gt;小蔡&lt;/li&gt;</span></span><br><span class="line"><span class="string">                &lt;li&gt;小民&lt;/li&gt;</span></span><br><span class="line"><span class="string">            &lt;/ul&gt;`</span>;</span><br></pre></td></tr></table></figure><h3 id="3-变量拼接"><a href="#3-变量拼接" class="headerlink" title="3.变量拼接"></a>3.变量拼接</h3><h4 id="在ES6之前的字符串拼接方法"><a href="#在ES6之前的字符串拼接方法" class="headerlink" title="在ES6之前的字符串拼接方法"></a>在ES6之前的字符串拼接方法</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> he = <span class="string">&#x27;hello&#x27;</span>;</span><br><span class="line"><span class="keyword">var</span> name = he + <span class="string">&#x27;小蔡&#x27;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(name);  <span class="comment">//hello小蔡</span></span><br></pre></td></tr></table></figure><h4 id="ES6新增拼接方法"><a href="#ES6新增拼接方法" class="headerlink" title="ES6新增拼接方法"></a>ES6新增拼接方法</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> gun1 = <span class="string">`R301`</span>;</span><br><span class="line"><span class="keyword">let</span> gun2 = <span class="string">`<span class="subst">$&#123;gun1&#125;</span> R99`</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(gun2);  <span class="comment">//R301 R99</span></span><br></pre></td></tr></table></figure><h2 id="五、简化对象写法"><a href="#五、简化对象写法" class="headerlink" title="五、简化对象写法"></a>五、简化对象写法</h2><h3 id="1-ES6之前的写法"><a href="#1-ES6之前的写法" class="headerlink" title="1.ES6之前的写法"></a>1.ES6之前的写法</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> name = <span class="string">&#x27;小红&#x27;</span>;</span><br><span class="line"><span class="keyword">let</span> fn = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">123</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> <span class="variable constant_">SCHOOL</span> = &#123;</span><br><span class="line">    <span class="attr">name</span>: name,</span><br><span class="line">    <span class="attr">fn</span>: fn</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-ES6的简化写法"><a href="#2-ES6的简化写法" class="headerlink" title="2.ES6的简化写法"></a>2.ES6的简化写法</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> name = <span class="string">&#x27;小红&#x27;</span>;</span><br><span class="line"><span class="keyword">let</span> fn = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">123</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//名字必须与之前的属性名一致</span></span><br><span class="line"><span class="keyword">const</span> <span class="variable constant_">SCHOOL</span>= &#123;</span><br><span class="line">    name,</span><br><span class="line">    fn</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="六、箭头函数"><a href="#六、箭头函数" class="headerlink" title="六、箭头函数"></a>六、箭头函数</h2><h3 id="1-ES6允许使用箭头-gt-来定义函数"><a href="#1-ES6允许使用箭头-gt-来定义函数" class="headerlink" title="1.ES6允许使用箭头(=&gt;)来定义函数"></a>1.ES6允许使用箭头(=&gt;)来定义函数</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="title function_">fn</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">123</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-箭头函数中的this是静态的，始终指向函数声明时所在作用域下的this的值"><a href="#2-箭头函数中的this是静态的，始终指向函数声明时所在作用域下的this的值" class="headerlink" title="2.箭头函数中的this是静态的，始终指向函数声明时所在作用域下的this的值"></a>2.箭头函数中的this是静态的，始终指向函数声明时所在作用域下的this的值</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 用之前的方法声明函数x1</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">x1</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">name</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 用箭头函数声明x2</span></span><br><span class="line"><span class="keyword">let</span> <span class="title function_">x2</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">name</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 在window下定义一个name</span></span><br><span class="line"><span class="variable language_">window</span>.<span class="property">name</span> = <span class="string">&#x27;window&#x27;</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="variable constant_">OBJ</span> = &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;this&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//直接调用</span></span><br><span class="line"><span class="title function_">x1</span>();  <span class="comment">//window</span></span><br><span class="line"><span class="title function_">x2</span>();  <span class="comment">//window</span></span><br><span class="line"><span class="comment">//使用call方法改变this指向之后调用</span></span><br><span class="line">x1.<span class="title function_">call</span>(<span class="variable constant_">OBJ</span>);  <span class="comment">//this</span></span><br><span class="line">x2.<span class="title function_">call</span>(<span class="variable constant_">OBJ</span>);  <span class="comment">//window</span></span><br></pre></td></tr></table></figure><h3 id="3-箭头函数不能作为构造函数实例化对象"><a href="#3-箭头函数不能作为构造函数实例化对象" class="headerlink" title="3.箭头函数不能作为构造函数实例化对象"></a>3.箭头函数不能作为构造函数实例化对象</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="title function_">Person</span> = (<span class="params">name, age</span>) =&gt; &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">name</span> = name,</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">age</span> = age</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> me =<span class="keyword">new</span> <span class="title class_">Pesron</span>(<span class="string">&#x27;xiaohong&#x27;</span>,<span class="number">22</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(me);  <span class="comment">//Uncaught TypeError: Person is not a constructor</span></span><br></pre></td></tr></table></figure><h3 id="4-不能使用arguments变量"><a href="#4-不能使用arguments变量" class="headerlink" title="4.不能使用arguments变量"></a>4.不能使用arguments变量</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="title function_">fn</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">arguments</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">fn</span>(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>)  <span class="comment">//Uncaught ReferenceError: arguments is not defined</span></span><br></pre></td></tr></table></figure><h3 id="5-箭头函数可以缩写"><a href="#5-箭头函数可以缩写" class="headerlink" title="5.箭头函数可以缩写"></a>5.箭头函数可以缩写</h3><h4 id="1-省略小括号，当形参有且只有一个的时候"><a href="#1-省略小括号，当形参有且只有一个的时候" class="headerlink" title="(1).省略小括号，当形参有且只有一个的时候"></a>(1).省略小括号，当形参有且只有一个的时候</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="title function_">add</span> = n =&gt; &#123;</span><br><span class="line">    <span class="keyword">return</span> n+ n;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">add</span>(<span class="number">9</span>));  <span class="comment">//18</span></span><br></pre></td></tr></table></figure><h4 id="2-省略花括号，代码里只有一条语句的时候，return也必须省略"><a href="#2-省略花括号，代码里只有一条语句的时候，return也必须省略" class="headerlink" title="(2).省略花括号，代码里只有一条语句的时候，return也必须省略"></a>(2).省略花括号，代码里只有一条语句的时候，return也必须省略</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="title function_">pow</span> = (<span class="params">n</span>) =&gt; n*n;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">pow</span>(<span class="number">8</span>));  <span class="comment">//64</span></span><br></pre></td></tr></table></figure><h3 id="6-箭头函数的一些应用场景"><a href="#6-箭头函数的一些应用场景" class="headerlink" title="6.箭头函数的一些应用场景"></a>6.箭头函数的一些应用场景</h3><h4 id="1-点击id为ad的块，让其2s后变为粉色"><a href="#1-点击id为ad的块，让其2s后变为粉色" class="headerlink" title="(1).点击id为ad的块，让其2s后变为粉色"></a>(1).点击id为ad的块，让其2s后变为粉色</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> ad = <span class="variable language_">document</span>.<span class="title function_">geiElementById</span>(ad);</span><br><span class="line">ad.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">let</span> that = <span class="variable language_">this</span>;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="comment">//因为计时器是属于window的方法，所以this指向window，但是window没有style这个属性，所以会报错</span></span><br><span class="line">        <span class="comment">//所以需要用that来保存之前this的指向</span></span><br><span class="line">        that.<span class="property">style</span>.<span class="property">background</span> = <span class="string">&#x27;pink&#x27;</span></span><br><span class="line">    &#125;, <span class="number">2000</span>);</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">//使用箭头函数</span></span><br><span class="line">ad.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">style</span>.<span class="property">background</span> = <span class="string">&#x27;pink&#x27;</span></span><br><span class="line">    &#125;, <span class="number">2000</span>);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h4 id="2-从数组中返回偶数"><a href="#2-从数组中返回偶数" class="headerlink" title="(2).从数组中返回偶数"></a>(2).从数组中返回偶数</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="variable constant_">ARR</span> = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>];</span><br><span class="line"><span class="comment">//filter()函数是将给定数组中满足条件的元素返回到新的数组里</span></span><br><span class="line"><span class="keyword">const</span> <span class="variable constant_">RESULT</span> = <span class="variable constant_">ARR</span>.<span class="title function_">filter</span>(<span class="keyword">function</span>(<span class="params">item</span>)&#123;</span><br><span class="line">    <span class="keyword">if</span>(item % <span class="number">2</span> === <span class="number">0</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable constant_">RESULT</span>);  <span class="comment">//[2,4]</span></span><br><span class="line"><span class="comment">//使用箭头函数来实现</span></span><br><span class="line"><span class="keyword">const</span> <span class="variable constant_">RESULT</span> = <span class="variable constant_">ARR</span>.<span class="title function_">filter</span>(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span>(item % <span class="number">2</span> === <span class="number">0</span>)&#123; </span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">const</span> <span class="variable constant_">RESULT</span> = <span class="variable constant_">ARR</span>.<span class="title function_">filter</span>(<span class="function"><span class="params">item</span> =&gt;</span> item % <span class="number">2</span> === <span class="number">0</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable constant_">RESULT</span>);  <span class="comment">//[2,4]</span></span><br></pre></td></tr></table></figure><p>箭头函数适合与this无关的回调，定时器，数组的方法回调<br>不适合与this有关的回调，事件回调，对象的方法</p><h2 id="七、ES6允许给函数参数赋初始值"><a href="#七、ES6允许给函数参数赋初始值" class="headerlink" title="七、ES6允许给函数参数赋初始值"></a>七、ES6允许给函数参数赋初始值</h2><h3 id="1-给形参赋初始值"><a href="#1-给形参赋初始值" class="headerlink" title="1.给形参赋初始值"></a>1.给形参赋初始值</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">add</span>(<span class="params">a,b,c=<span class="number">10</span></span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> a+b+c;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> result = <span class="title function_">add</span>(<span class="number">1</span>,<span class="number">2</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(result);  <span class="comment">//13</span></span><br></pre></td></tr></table></figure><h3 id="2-可以与解构赋值结合使用"><a href="#2-可以与解构赋值结合使用" class="headerlink" title="2.可以与解构赋值结合使用"></a>2.可以与解构赋值结合使用</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">connect</span>(<span class="params">&#123;host=<span class="string">&quot;127.0.0.1&quot;</span>, username, password, port&#125;</span>)&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(host);</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(username);</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(password);</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(port);</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">connect</span>(&#123;</span><br><span class="line">    <span class="attr">username</span>: <span class="string">&#x27;root&#x27;</span>,</span><br><span class="line">    <span class="attr">password</span>: <span class="string">&#x27;root&#x27;</span>,</span><br><span class="line">    <span class="attr">port</span>: <span class="number">3306</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="八、rest参数（用来替代无法在箭头函数中使用的arguments参数）"><a href="#八、rest参数（用来替代无法在箭头函数中使用的arguments参数）" class="headerlink" title="八、rest参数（用来替代无法在箭头函数中使用的arguments参数）"></a>八、rest参数（用来替代无法在箭头函数中使用的arguments参数）</h2><h3 id="两者区别"><a href="#两者区别" class="headerlink" title="两者区别"></a>两者区别</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">data</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">arguments</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">data</span>(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>);  <span class="comment">//Arguments(3)</span></span><br><span class="line"><span class="comment">// ES6获取实参的方法 rest参数</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">data2</span>(<span class="params">...args</span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(args);</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">data2</span>(<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>);</span><br><span class="line"><span class="comment">// rest参数必须放到参数最后</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params">a,b,...arg</span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(a);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(b);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(arg);</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">fn</span>(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>);  <span class="comment">//1 2 (3)[3,4,5]</span></span><br></pre></td></tr></table></figure><h2 id="九、扩展运算符…（能将数组转化为逗号分割开的参数序列）"><a href="#九、扩展运算符…（能将数组转化为逗号分割开的参数序列）" class="headerlink" title="九、扩展运算符…（能将数组转化为逗号分割开的参数序列）"></a>九、扩展运算符…（能将数组转化为逗号分割开的参数序列）</h2><h3 id="1-数组的拼接"><a href="#1-数组的拼接" class="headerlink" title="1.数组的拼接"></a>1.数组的拼接</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="variable constant_">APEX</span> = [<span class="string">&#x27;狗子&#x27;</span>,<span class="string">&#x27;G7人&#x27;</span>,<span class="string">&#x27;命脉&#x27;</span>];</span><br><span class="line"><span class="keyword">const</span> <span class="variable constant_">LOL</span> = [<span class="string">&#x27;亚索&#x27;</span>,<span class="string">&#x27;劫&#x27;</span>];</span><br><span class="line"><span class="keyword">const</span> <span class="variable constant_">HB</span> = [...<span class="variable constant_">APEX</span>, ...<span class="variable constant_">LOL</span>];</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable constant_">HB</span>);  <span class="comment">//Array(5)[&#x27;狗子&#x27;,&#x27;G7人&#x27;,&#x27;命脉&#x27;,&#x27;亚索&#x27;,&#x27;劫&#x27;]</span></span><br></pre></td></tr></table></figure><h3 id="2-数组的克隆"><a href="#2-数组的克隆" class="headerlink" title="2.数组的克隆"></a>2.数组的克隆</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> A = [<span class="number">666</span>,<span class="number">777</span>];</span><br><span class="line"><span class="keyword">const</span> <span class="variable constant_">CA</span> = [...A];</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable constant_">CA</span>);  <span class="comment">//Array(2)[666,777]</span></span><br><span class="line"><span class="comment">// 克隆只是一个浅拷贝（就是拷贝变量所存的值，如果是引用变量，拷贝的就是它里面的地址）</span></span><br></pre></td></tr></table></figure><h3 id="3-将伪数组转换为真正的数组"><a href="#3-将伪数组转换为真正的数组" class="headerlink" title="3.将伪数组转换为真正的数组"></a>3.将伪数组转换为真正的数组</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="variable constant_">DIVS</span> = <span class="variable language_">document</span>.<span class="title function_">querySelectorAll</span>(<span class="string">&#x27;div&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> <span class="variable constant_">DIVARR</span> = [...<span class="variable constant_">DIVS</span>];</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable constant_">DIVARR</span>);  <span class="comment">//Array(3)[div,div,div]</span></span><br></pre></td></tr></table></figure><h2 id="十、ES6引入了一种新的原始数据类型Symbol，表示独一无二的值，是JS中第七种数据类型"><a href="#十、ES6引入了一种新的原始数据类型Symbol，表示独一无二的值，是JS中第七种数据类型" class="headerlink" title="十、ES6引入了一种新的原始数据类型Symbol，表示独一无二的值，是JS中第七种数据类型"></a>十、ES6引入了一种新的原始数据类型Symbol，表示独一无二的值，是JS中第七种数据类型</h2><h3 id="1-Symbol的特点"><a href="#1-Symbol的特点" class="headerlink" title="1.Symbol的特点"></a>1.Symbol的特点</h3><p>(1).Symbol的值是唯一的，用来解决命名冲突问题<br>(2).Symbol的值不能与其他数据进行运算<br>(3).Symbol给对象定义的属性不能使用for in进行遍历</p><h3 id="2-创建Symbol"><a href="#2-创建Symbol" class="headerlink" title="2.创建Symbol"></a>2.创建Symbol</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> s = <span class="title class_">Symbol</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(s, <span class="keyword">typeof</span> s);  <span class="comment">//Symbol() &quot;symbol&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> s2 = <span class="title class_">Symbol</span>(<span class="string">&#x27;小红&#x27;</span>);</span><br><span class="line"><span class="keyword">let</span> s3 = <span class="title class_">Symbol</span>(<span class="string">&#x27;小红&#x27;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(s2, <span class="keyword">typeof</span> s2);  <span class="comment">//Symbol(小红) symbol</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(s2 === s3);  <span class="comment">//false，里面只是一个标志</span></span><br><span class="line"><span class="comment">// 使用Symbol.for创建</span></span><br><span class="line"><span class="keyword">let</span> s4 = <span class="title class_">Symbol</span>.<span class="title function_">for</span>(<span class="string">&#x27;小红&#x27;</span>);</span><br><span class="line"><span class="keyword">let</span> s5 = <span class="title class_">Symbol</span>.<span class="title function_">for</span>(<span class="string">&#x27;小红&#x27;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(s4 === s5);  <span class="comment">//true</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(s4, <span class="keyword">typeof</span> s4);  <span class="comment">//Symbol(小红) &#x27;symbol&#x27;</span></span><br></pre></td></tr></table></figure><h3 id="3-使用场景"><a href="#3-使用场景" class="headerlink" title="3.使用场景"></a>3.使用场景</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> game = &#123;</span><br><span class="line">    <span class="attr">up</span>: <span class="number">213</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> methods = &#123;</span><br><span class="line">    <span class="attr">up</span>: <span class="title class_">Symbol</span>(),</span><br><span class="line">    <span class="attr">down</span>: <span class="title class_">Symbol</span>()</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// 安全的向game对象中添加一些属性</span></span><br><span class="line">game[methods.<span class="property">up</span>] = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;我可以改变形状&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line">game[methods.<span class="property">down</span>] = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;我可以快速下降&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(game);</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> youxi = &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;bf&#x27;</span>,</span><br><span class="line">    [<span class="title class_">Symbol</span>(<span class="string">&#x27;say&#x27;</span>)]: <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;我可以说话&#x27;</span>);</span><br><span class="line">    &#125;,</span><br><span class="line">    [<span class="title class_">Symbol</span>(<span class="string">&#x27;sing&#x27;</span>)]: <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;我可以唱歌&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(youxi);</span><br></pre></td></tr></table></figure><h3 id="4-Symbol的内置值（可以当作属性使用）"><a href="#4-Symbol的内置值（可以当作属性使用）" class="headerlink" title="4.Symbol的内置值（可以当作属性使用）"></a>4.Symbol的内置值（可以当作属性使用）</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// hasInstance的特点，可以自己控制类型检测</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span>&#123;</span><br><span class="line">    <span class="keyword">static</span> [<span class="title class_">Symbol</span>.<span class="property">hasInstance</span>] ()&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;我被用来检测类型了&#x27;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;  <span class="comment">//在这个地方如果是true，下面instanceof就会返回true，反之一样</span></span><br><span class="line">    &#125;    </span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> o = &#123;&#125;;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(o <span class="keyword">instanceof</span> <span class="title class_">Person</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="variable constant_">ARR</span> = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>];</span><br><span class="line"><span class="keyword">const</span> <span class="title class_">ARR2</span> = [<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>];</span><br><span class="line"><span class="comment">// concat将两数组连接起来，该方法不会改变原有数组，只会返回一个新数组的副本</span></span><br><span class="line"><span class="title class_">ARR2</span>[<span class="title class_">Symbol</span>.<span class="property">isConcatSpreadable</span>] = <span class="literal">false</span>;  <span class="comment">//控制ARR2不可以展开</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable constant_">ARR</span>.<span class="title function_">concat</span>(<span class="title class_">ARR2</span>));  <span class="comment">//[1,2,3,Array(3)]</span></span><br></pre></td></tr></table></figure><h2 id="十一、迭代器（Iterator）"><a href="#十一、迭代器（Iterator）" class="headerlink" title="十一、迭代器（Iterator）"></a>十一、迭代器（Iterator）</h2><h3 id="1-什么是迭代器"><a href="#1-什么是迭代器" class="headerlink" title="1.什么是迭代器"></a>1.什么是迭代器</h3><p>（1）迭代器是一种接口，为各种不同的数据结构提供统一的访问机制。任何数据结构只要部署了Iterator接口(其实就是一个对象的属性)，就可以完成遍历操作。<br>（2）ES6创造了一种新的遍历命令for…of循环,Iterator接口主要供for…of使用。<br>（3）原生具备Iterator接口的数据:<br>    Array, Arguments, Set, Map, String, TypedArray, NodeList</p><h3 id="2-for-of-和-for-in"><a href="#2-for-of-和-for-in" class="headerlink" title="2.for of 和 for in"></a>2.for of 和 for in</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="variable constant_">AR</span> = [<span class="string">&#x27;M4&#x27;</span>,<span class="string">&#x27;AK&#x27;</span>,<span class="string">&#x27;MP7&#x27;</span>];</span><br><span class="line"><span class="comment">// 使用for of遍历该数组</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> v <span class="keyword">of</span> <span class="variable constant_">AR</span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(v);  <span class="comment">//M4,AK,MP7</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 使用for in遍历数组</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> w <span class="keyword">in</span> <span class="variable constant_">AR</span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(w);  <span class="comment">//0,1,2</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>所以由此可知,使用for in的时候,w中保存的是下标,使用for of中,v保存的是值<br>迭代器的原理:<br>1.先创建一个指针对象,指向当前数据结构的起始位置。<br>2.第一次调用对象的next方法,指针自动指向数据结构的第一个成员。<br>3.接下来不断调用next方法,指针一直往后移动,直到指向最后一个成员。<br>4.每调用next方法返回一个包含value和done属性的对象。<br>5.value就是值,done表示是否遍历完成,若为ture则表示已经全部遍历完了。</p><h3 id="3-迭代器的应用：自定义迭代器"><a href="#3-迭代器的应用：自定义迭代器" class="headerlink" title="3.迭代器的应用：自定义迭代器"></a>3.迭代器的应用：自定义迭代器</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="variable constant_">CLASS</span> = &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;15&#x27;</span>,</span><br><span class="line">    <span class="attr">stus</span>: [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>],</span><br><span class="line">    [<span class="title class_">Symbol</span>.<span class="property">iterator</span>]()&#123;</span><br><span class="line">        <span class="keyword">let</span> index = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">let</span> that = <span class="variable language_">this</span>;</span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">            <span class="attr">next</span>: <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">                <span class="keyword">if</span>(index &lt; that.<span class="property">stus</span>.<span class="property">length</span>)&#123;</span><br><span class="line">                    <span class="keyword">const</span> result = &#123;<span class="attr">value</span>:that.<span class="property">stus</span>[index],<span class="attr">done</span>:<span class="literal">false</span>&#125;</span><br><span class="line">                    index++;</span><br><span class="line">                    <span class="keyword">return</span> result;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span>&#123;</span><br><span class="line">                    <span class="keyword">return</span> &#123;<span class="attr">value</span>:<span class="literal">undefined</span>, <span class="attr">done</span>:<span class="literal">true</span>&#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> x <span class="keyword">of</span> <span class="variable constant_">CLASS</span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(x);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="十二、生成器"><a href="#十二、生成器" class="headerlink" title="十二、生成器"></a>十二、生成器</h2><p>生成器本身是一个函数，是ES6提供的一种异步编程解决方案</p><h3 id="1-定义函数，在function和函数名之间加一个"><a href="#1-定义函数，在function和函数名之间加一个" class="headerlink" title="1.定义函数，在function和函数名之间加一个*"></a>1.定义函数，在function和函数名之间加一个*</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// yield可以看作代码的分割符，执行到yield就会暂停</span></span><br><span class="line"><span class="keyword">function</span> * <span class="title function_">gen</span>(<span class="params"></span>)&#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">111</span>);</span><br><span class="line"><span class="keyword">yield</span> <span class="string">&#x27;666&#x27;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">222</span>);</span><br><span class="line"><span class="keyword">yield</span> <span class="string">&#x27;lll&#x27;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">333</span>);</span><br><span class="line"><span class="keyword">yield</span> <span class="string">&#x27;hhhh&#x27;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">444</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> iterator = <span class="title function_">gen</span>();</span><br><span class="line"><span class="comment">// 需要调用next方法才能执行函数，且遇到yield就会暂停执行，再次调用next函数就会接着往下执行</span></span><br><span class="line">iterator.<span class="title function_">next</span>();  <span class="comment">//111</span></span><br><span class="line">iterator.<span class="title function_">next</span>();  <span class="comment">//222</span></span><br><span class="line">iterator.<span class="title function_">next</span>();  <span class="comment">//333</span></span><br><span class="line">iterator.<span class="title function_">next</span>();  <span class="comment">//444</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> v <span class="keyword">of</span> <span class="title function_">gen</span>())&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(v);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 生成器函数参数</span></span><br><span class="line"><span class="keyword">function</span> * <span class="title function_">x</span>(<span class="params">arg</span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(arg);  <span class="comment">//&#x27;AAA&#x27;</span></span><br><span class="line">    <span class="keyword">let</span> one = <span class="keyword">yield</span> <span class="number">111</span>;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(one);  <span class="comment">//&#x27;BBB&#x27;</span></span><br><span class="line">    <span class="keyword">let</span> two = <span class="keyword">yield</span> <span class="number">222</span>;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(two);  <span class="comment">//&#x27;CCC&#x27;</span></span><br><span class="line">    <span class="keyword">let</span> three = <span class="keyword">yield</span> <span class="number">333</span>;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(three);  <span class="comment">//&#x27;DDD&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> iterator1 = <span class="title function_">x</span>(<span class="string">&#x27;AAA&#x27;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(iterator1.<span class="title function_">next</span>());  <span class="comment">//这个不填参数，作为启动函数的操作</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(iterator1.<span class="title function_">next</span>(<span class="string">&#x27;BBB&#x27;</span>));  <span class="comment">//参数作为第一个yield的返回值</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(iterator1.<span class="title function_">next</span>(<span class="string">&#x27;CCC&#x27;</span>));  <span class="comment">//参数作为第二个yield的返回值</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(iterator1.<span class="title function_">next</span>(<span class="string">&#x27;DDD&#x27;</span>));  <span class="comment">//参数作为第三个yield的返回值</span></span><br></pre></td></tr></table></figure><h3 id="2-生成器的函数实例-1s后控制台输出111，2s后输出222，3s后输出333"><a href="#2-生成器的函数实例-1s后控制台输出111，2s后输出222，3s后输出333" class="headerlink" title="2.生成器的函数实例:1s后控制台输出111，2s后输出222，3s后输出333"></a>2.生成器的函数实例:1s后控制台输出111，2s后输出222，3s后输出333</h3><h4 id="1-使用回调函数，会造成回调地狱的现象"><a href="#1-使用回调函数，会造成回调地狱的现象" class="headerlink" title="(1).使用回调函数，会造成回调地狱的现象"></a>(1).使用回调函数，会造成回调地狱的现象</h4><p>什么是回调地狱？<br>回调地狱会造成代码可复用性不强，可阅读性差，可维护性(迭代性差)，扩展性差等等问题。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> timer = <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">111</span>);</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">222</span>);</span><br><span class="line">        <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">333</span>);</span><br><span class="line">        &#125;, <span class="number">3000</span>)</span><br><span class="line">    &#125;, <span class="number">2000</span>);</span><br><span class="line">&#125;, <span class="number">1000</span>);</span><br></pre></td></tr></table></figure><h4 id="2-使用生成器，解决异步编程问题"><a href="#2-使用生成器，解决异步编程问题" class="headerlink" title="(2).使用生成器，解决异步编程问题"></a>(2).使用生成器，解决异步编程问题</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">one</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">111</span>);</span><br><span class="line">        iterator.<span class="title function_">next</span>();</span><br><span class="line">    &#125;,<span class="number">1000</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">two</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">222</span>);</span><br><span class="line">        iterator.<span class="title function_">next</span>();</span><br><span class="line">    &#125;,<span class="number">2000</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">three</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">333</span>);</span><br><span class="line">        iterator.<span class="title function_">next</span>();</span><br><span class="line">    &#125;,<span class="number">3000</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> * <span class="title function_">gen</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">yield</span> <span class="title function_">one</span>();</span><br><span class="line">    <span class="keyword">yield</span> <span class="title function_">two</span>();</span><br><span class="line">    <span class="keyword">yield</span> <span class="title function_">three</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> iterator = <span class="title function_">gen</span>();</span><br><span class="line">iterator.<span class="title function_">next</span>();</span><br></pre></td></tr></table></figure><h2 id="十三、Promise"><a href="#十三、Promise" class="headerlink" title="十三、Promise"></a>十三、Promise</h2><h3 id="1-功能"><a href="#1-功能" class="headerlink" title="1.功能"></a>1.功能</h3><p>（1）Promise是ES6引入的异步编程的新解决方案。<br>（2）语法上Promise是一个构造函数。<br>（3）用来封装异步操作并可以获取其成功或失败的结果。</p><h3 id="2-声明一个Promise函数"><a href="#2-声明一个Promise函数" class="headerlink" title="2.声明一个Promise函数"></a>2.声明一个Promise函数</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> p = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="keyword">function</span>(<span class="params">resolve, reject</span>)&#123;    <span class="comment">//参数的名字可以随便起</span></span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="keyword">let</span> data = <span class="string">&#x27;数据库中用户的数据&#x27;</span>;</span><br><span class="line">        <span class="comment">// 数据调用成功调用resolve，然后会调用p.then中的第一个回调函数</span></span><br><span class="line">        <span class="comment">// resolve(data);</span></span><br><span class="line">        <span class="comment">// 数据读取失败调用reject，然后会调用p.then中的第二个回调函数</span></span><br><span class="line">        <span class="keyword">let</span> err = <span class="string">&#x27;数据读取失败&#x27;</span>;</span><br><span class="line">        <span class="title function_">reject</span>(err);</span><br><span class="line">    &#125;, <span class="number">1000</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 调用Promise对象的then方法</span></span><br><span class="line">p.<span class="title function_">then</span>(<span class="keyword">function</span>(<span class="params">value</span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(value);</span><br><span class="line">&#125;, <span class="keyword">function</span>(<span class="params">reason</span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(err);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="3-Promise-then"><a href="#3-Promise-then" class="headerlink" title="3.Promise.then"></a>3.Promise.then</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> p = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">        <span class="title function_">resolve</span>(<span class="string">&#x27;用户数据&#x27;</span>);</span><br><span class="line">        <span class="comment">// reject(&#x27;出错了&#x27;)；</span></span><br><span class="line">    &#125;， <span class="number">1000</span>);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 调用then方法，then方法返回的结果是Promise对象，对象状态由回调函数的执行结果决定。</span></span><br><span class="line"><span class="comment">// 1.如果回调函数中返回的结果是非Promise属性类型，状态为成功。</span></span><br><span class="line"><span class="comment">// 2.如果回调函数中返回的结果是Promise属性类型，状态为返回的Promise的状态。</span></span><br><span class="line"><span class="comment">// 3.抛出错误，状态为出错。</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> result = p.<span class="title function_">then</span>(<span class="function"><span class="params">value</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(value);</span><br><span class="line">    <span class="comment">// return 123;  //非Promise对象，状态为成功</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>)=&gt;</span>&#123;</span><br><span class="line">        <span class="comment">// resolve(&#x27;ok&#x27;);  //Promise对象，状态为成功</span></span><br><span class="line">        <span class="comment">// reject(&#x27;error&#x27;)&#x27;  //Promise对象，状态为出错</span></span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&#x27;出错啦&#x27;</span>);  <span class="comment">//抛出错误，状态为出错</span></span><br><span class="line">    &#125;)</span><br><span class="line">&#125;, <span class="function"><span class="params">reason</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">warn</span>(reason);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(result);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 也可以进行链式调用</span></span><br><span class="line">p.<span class="title function_">then</span>(<span class="function"><span class="params">value</span> =&gt;</span> &#123;&#125;, <span class="function"><span class="params">reason</span> =&gt;</span> &#123;&#125;).<span class="title function_">then</span>(<span class="function"><span class="params">value</span> =&gt;</span> &#123;&#125;, <span class="function"><span class="params">reason</span>=&gt;</span> &#123;&#125;);</span><br></pre></td></tr></table></figure><h2 id="十四、集合与API"><a href="#十四、集合与API" class="headerlink" title="十四、集合与API"></a>十四、集合与API</h2><h3 id="1-简介"><a href="#1-简介" class="headerlink" title="1.简介"></a>1.简介</h3><p>（1）ES6提供了一种新的数据结构SET（集合）。类似于数组，但成员的值都是唯一的。<br>（2）集合实现了Iterator接口，所以可以使用扩展运算符和for of进行遍历。<br>（3）集合的属性和方法：<br>    size        返回集合的元素个数<br>    add         增加一个新元素，返回当前集合<br>    delete      删除特定元素，返回boolean值<br>    has         检测集合中是否包含某个元素，返回boolean值</p><h3 id="2-声明集合"><a href="#2-声明集合" class="headerlink" title="2.声明集合"></a>2.声明集合</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> s = <span class="keyword">new</span> <span class="title class_">Set</span>();</span><br><span class="line"><span class="keyword">let</span> s2 = <span class="keyword">new</span> <span class="title class_">Set</span>([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">3</span>,<span class="number">2</span>]);</span><br><span class="line"><span class="comment">// 传入的数组会自动进行去重</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(s2);  <span class="comment">//1,2,3,4,5</span></span><br><span class="line"><span class="comment">// 返回去重后的元素个数</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(s2.<span class="property">size</span>);  <span class="comment">//5</span></span><br><span class="line"><span class="comment">// 添加新的元素</span></span><br><span class="line">s2.<span class="title function_">add</span>(<span class="number">9</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(s2);  <span class="comment">//1,2,3,4,5,9</span></span><br><span class="line"><span class="comment">// 删除特定元素</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(s2.<span class="title function_">delete</span>(<span class="number">9</span>));  <span class="comment">//true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(s2);  <span class="comment">//1,2,3,4,5</span></span><br><span class="line"><span class="comment">// 检测是否包含某个元素</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(s2.<span class="title function_">has</span>(<span class="number">1</span>));  <span class="comment">//true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(s2.<span class="title function_">ha2</span>(<span class="number">10</span>));  <span class="comment">//false</span></span><br><span class="line"><span class="comment">// 清空集合</span></span><br><span class="line"><span class="comment">// s2.clear();</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(s2);  <span class="comment">//set(0) &#123;size:0&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> v <span class="keyword">of</span> s2)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(v);  <span class="comment">//1 2 3 4 5</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-集合实践"><a href="#3-集合实践" class="headerlink" title="3.集合实践"></a>3.集合实践</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">8</span>,<span class="number">8</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">1</span>,<span class="number">2</span>];</span><br><span class="line"><span class="comment">// 1.数组去重，因为result的结果不是数组，所以需要用到扩展运算符转化为数组</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> result = [...<span class="keyword">new</span> <span class="title class_">Set</span>(arr)];</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(result);  <span class="comment">//Array(7)[1,2,3,4,5,7,8]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 2.交集</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> arr2 = [<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">6</span>];</span><br><span class="line"><span class="keyword">let</span> result = [...<span class="keyword">new</span> <span class="title class_">Set</span>(arr2)].<span class="title function_">filter</span>(<span class="function"><span class="params">item</span> =&gt;</span> <span class="keyword">new</span> <span class="title class_">Set</span>(arr2).<span class="title function_">has</span>(item));</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(result);  <span class="comment">//[4,5]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 3.并集</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> union = [...<span class="keyword">new</span> <span class="title class_">Set</span>([...arr, ...arr2])];</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(union);  <span class="comment">//[1,2,3,4,5,6,8]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 4.差集</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> diff = [...<span class="keyword">new</span> <span class="title class_">Set</span>(arr)].<span class="title function_">filter</span>(<span class="function"><span class="params">item</span> =&gt;</span> !(<span class="keyword">new</span> <span class="title class_">Set</span>(arr2).<span class="title function_">has</span>(item)));</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(diff);  <span class="comment">//[1,2,3,7,8]</span></span><br></pre></td></tr></table></figure><h2 id="十五、Map"><a href="#十五、Map" class="headerlink" title="十五、Map"></a>十五、Map</h2><h3 id="1-Map简介"><a href="#1-Map简介" class="headerlink" title="1.Map简介"></a>1.Map简介</h3><p>（1）ES6提供了Map数据结构。它类似于对象，也是键值对的集合。但是“键”的范围不限于字符串，各种类型的值都可以当作键。<br>（2）Map也实现了iterator接口，所以可以使用扩展运算符和for of。<br>（3）属性和方法：<br>    size        返回Map元素的个数<br>    set         增加一个新元素，返回当前Map<br>    get         返回键名对象的键值<br>    has         检测Map中是否包含某个元素，返回boolean值<br>    clear       清空集合，返回undefined</p><h3 id="2-声明一个Map"><a href="#2-声明一个Map" class="headerlink" title="2.声明一个Map"></a>2.声明一个Map</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> m = <span class="keyword">new</span> <span class="title class_">Map</span>();</span><br><span class="line"><span class="comment">// 添加元素</span></span><br><span class="line">m.<span class="title function_">set</span>(<span class="string">&#x27;name&#x27;</span>,<span class="string">&#x27;小红&#x27;</span>);</span><br><span class="line"><span class="keyword">let</span> key = &#123;</span><br><span class="line">    school : <span class="string">&#x27;GEO&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line">m.<span class="title function_">set</span>(key, [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(m);  <span class="comment">//&#123;Object =&gt; Array(3)&#125; key:&#123;school : &#x27;GEO&#x27;&#125;, value: [1,2,3]</span></span><br><span class="line"><span class="comment">// size</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(m.<span class="property">size</span>);  <span class="comment">//2</span></span><br><span class="line"><span class="comment">// 删除元素</span></span><br><span class="line">m.<span class="title function_">delete</span>(<span class="string">&#x27;name&#x27;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(m);</span><br><span class="line"><span class="comment">// 获取特定元素</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(m.<span class="title function_">get</span>(key));  <span class="comment">//[1,2,3]</span></span><br><span class="line"><span class="comment">// 清空Map</span></span><br><span class="line"><span class="comment">// m.clear()</span></span><br><span class="line"><span class="comment">// 遍历</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> v <span class="keyword">of</span> m)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(v);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="十六、Class"><a href="#十六、Class" class="headerlink" title="十六、Class"></a>十六、Class</h2><h3 id="1-简介-1"><a href="#1-简介-1" class="headerlink" title="1.简介"></a>1.简介</h3><p>（1）ES6提供了更接近传统语言的写法，引入了Class（类）这个概念。<br>（2）作为对象的模板，通过Class关键字，可以定义为类。<br>（3）它的绝大部分功能ES5都可以做到，新的写法只是让原型写法更加清晰。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ES5的构造方法</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Phone</span>(<span class="params">brand, price</span>)&#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">brand</span> = brand;</span><br><span class="line">    <span class="variable language_">this</span>,price = price;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 添加方法</span></span><br><span class="line"><span class="title class_">Phone</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">call</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;我可以打电话&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 实例化对象</span></span><br><span class="line"><span class="keyword">let</span> <span class="title class_">Huawei</span> = <span class="keyword">new</span> <span class="title class_">Phone</span>(<span class="string">&#x27;华为&#x27;</span>, <span class="number">5999</span>);</span><br><span class="line"><span class="title class_">Huawei</span>.<span class="title function_">call</span>();  <span class="comment">//我可以打电话</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Huawei</span>);  <span class="comment">//brand:华为   price: 5999</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Class</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Phone</span>&#123;</span><br><span class="line">    <span class="comment">// 构造方法名字是固定的不能更改</span></span><br><span class="line">    <span class="title function_">constrctor</span>(<span class="params">brand, price</span>)&#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">brand</span> = brand;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">price</span> = price;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 添加方法必须使用该语法，不能使用ES5的对象完整形式</span></span><br><span class="line">    <span class="title function_">call</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;我可以打电话&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> <span class="title class_">OnePlus</span> = <span class="keyword">new</span> <span class="title class_">Phone</span>(<span class="string">&#x27;1+&#x27;</span>, <span class="number">1999</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">OnePlus</span>);  <span class="comment">//brand:&#x27;1+&#x27;  price: 1999</span></span><br></pre></td></tr></table></figure><h3 id="2-Class的静态成员"><a href="#2-Class的静态成员" class="headerlink" title="2.Class的静态成员"></a>2.Class的静态成员</h3><h4 id="1-ES5中"><a href="#1-ES5中" class="headerlink" title="(1).ES5中"></a>(1).ES5中</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title class_">Phone</span>.<span class="property">name</span> = <span class="string">&#x27;手机&#x27;</span>;</span><br><span class="line"><span class="title class_">Phone</span>.<span class="property">change</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;666&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="title class_">Phone</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">size</span> = <span class="string">&#x27;6&#x27;</span>;</span><br><span class="line"><span class="keyword">let</span> nokia = <span class="keyword">new</span> <span class="title class_">Phone</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(nokia.<span class="property">name</span>);  <span class="comment">//undefined，说明实例对象没有构造函数对象上的属性</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(nokia.<span class="property">size</span>);  <span class="comment">//6，可以读取到原型对象上的属性和方法</span></span><br></pre></td></tr></table></figure><h4 id="2-Class的静态对象"><a href="#2-Class的静态对象" class="headerlink" title="(2).Class的静态对象"></a>(2).Class的静态对象</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Class</span> <span class="title class_">Phone</span>()&#123;</span><br><span class="line">    <span class="keyword">static</span> name = <span class="string">&#x27;手机&#x27;</span>;</span><br><span class="line">    <span class="keyword">static</span> <span class="title function_">change</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;666&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> nokia = <span class="keyword">new</span> <span class="title class_">Phone</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(nokia.<span class="property">name</span>);  <span class="comment">//undefined，如果去掉static就是手机</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Phone</span>.<span class="property">name</span>);  <span class="comment">//手机</span></span><br></pre></td></tr></table></figure><h2 id="十七、构造函数继承"><a href="#十七、构造函数继承" class="headerlink" title="十七、构造函数继承"></a>十七、构造函数继承</h2><h3 id="1-ES5使用构造函数继承"><a href="#1-ES5使用构造函数继承" class="headerlink" title="1.ES5使用构造函数继承"></a>1.ES5使用构造函数继承</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Phone</span>(<span class="params">brand, price</span>)&#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">brand</span> = brand;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">price</span> = price;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title class_">Phone</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">call</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;我可以打电话&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">SmartPhone</span>(<span class="params">brand, price, color, size</span>)&#123;</span><br><span class="line">    <span class="title class_">Phone</span>.<span class="title function_">call</span>(<span class="variable language_">this</span>, brand, price);</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">color</span> = color;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">size</span> = size;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 设置子集构造函数的原型</span></span><br><span class="line"><span class="title class_">SmartPhone</span>.<span class="property"><span class="keyword">prototype</span></span> = <span class="keyword">new</span> <span class="title class_">Phone</span>;</span><br><span class="line"><span class="title class_">SmartPhone</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">constructor</span> = <span class="title class_">SmartPhone</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 声明子类的方法</span></span><br><span class="line"><span class="title class_">SmartPhone</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">photo</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;我可以拍照&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="title class_">SmartPhone</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">play</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;我可以玩游戏&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> chuizi = <span class="keyword">new</span> <span class="title class_">SmartPhone</span>(<span class="string">&#x27;锤子&#x27;</span>, <span class="number">2499</span>, <span class="string">&#x27;黑色&#x27;</span>, <span class="number">5.5</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(chuizi);</span><br></pre></td></tr></table></figure><h3 id="2-ES6使用类进行继承"><a href="#2-ES6使用类进行继承" class="headerlink" title="2.ES6使用类进行继承"></a>2.ES6使用类进行继承</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Phone</span>&#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params">brand, price</span>)&#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">brand</span> = brand;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">price</span> = price;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 父类的成员属性</span></span><br><span class="line">    <span class="title function_">call</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;我可以打电话&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">SmartPhone</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Phone</span> &#123;</span><br><span class="line">    <span class="comment">// 子类的构造方法</span></span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params">brand, price, color, size</span>)&#123;</span><br><span class="line">        <span class="variable language_">super</span>(brand, price);  <span class="comment">//Phone.call(this, brand, price)</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">color</span> = color;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">size</span> = size;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">photo</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;我可以拍照&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">play</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;我可以玩游戏&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 子类对父类方法的重写(覆盖)</span></span><br><span class="line">    <span class="title function_">call</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;我可以进行视频通话&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> xiaomi = <span class="keyword">new</span> <span class="title class_">SmartPhone</span>(<span class="string">&#x27;小米&#x27;</span>, <span class="number">799</span>, <span class="string">&#x27;黑色&#x27;</span>, <span class="number">8</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(xiaomi);</span><br><span class="line">xiaomi.<span class="title function_">call</span>();  <span class="comment">//我可以进行视频通话</span></span><br></pre></td></tr></table></figure><h2 id="十八、Class中的get和set"><a href="#十八、Class中的get和set" class="headerlink" title="十八、Class中的get和set"></a>十八、Class中的get和set</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// get和set</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Phone</span>&#123;</span><br><span class="line">    <span class="keyword">get</span> <span class="title function_">price</span>()&#123;  <span class="comment">//只要读取了price属性,就会执行这里面的代码</span></span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;价格属性被读取了&#x27;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;666&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">set</span> <span class="title function_">price</span>(<span class="params">newVal</span>)&#123;  <span class="comment">//只要修改了price属性,就会执行这里面的代码</span></span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;价格属性被修改了&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 实例化对象</span></span><br><span class="line"><span class="keyword">let</span> s = <span class="keyword">new</span> <span class="title class_">Phone</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(s.<span class="property">price</span>);  <span class="comment">//价格属性被读取了   /n   666</span></span><br><span class="line">s.<span class="property">price</span> = <span class="string">&#x27;free&#x27;</span>;   <span class="comment">//价格属性被修改了</span></span><br></pre></td></tr></table></figure><h2 id="十九、数值扩展"><a href="#十九、数值扩展" class="headerlink" title="十九、数值扩展"></a>十九、数值扩展</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1.Number.EPSILON是JS表示的最小精度</span></span><br><span class="line"><span class="comment">// EPSILON属性的值接近于2.2204460492503130808472633361816E-16</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">0.1</span> + <span class="number">0.2</span> === <span class="number">0.3</span>);  <span class="comment">//false,因为浮点数运算不准确,所以需要如下调整</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">equal</span>(<span class="params">a,b</span>)&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="title class_">Math</span>.<span class="title function_">abs</span>(a-b) &lt; <span class="title class_">Number</span>.<span class="property">EPSILON</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">equal</span>(<span class="number">0.1</span>+<span class="number">0.2</span>,<span class="number">0.3</span>));  <span class="comment">//true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 2.二进制(0b开头)和八进制(0o开头)和十六进制(0x开头)</span></span><br><span class="line"><span class="keyword">let</span> b =<span class="number">0b1010</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(b);  <span class="comment">//10</span></span><br><span class="line"><span class="keyword">let</span> o =<span class="number">0o777</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(o);  <span class="comment">//511</span></span><br><span class="line"><span class="keyword">let</span> x = <span class="number">0xff</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(x);  <span class="comment">//255</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 3.Number.isFinite,检测一个数值是否为有限数</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Number</span>.<span class="built_in">isFinite</span>(<span class="number">100</span>));  <span class="comment">//true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Number</span>.<span class="built_in">isFinite</span>(<span class="number">100</span>/<span class="number">0</span>));  <span class="comment">//false</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 4.Number.isNaN,检测一个数值是否为NaN</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Number</span>.<span class="built_in">isNaN</span>(<span class="number">123</span>));  <span class="comment">//false</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 5.Number.parseInt Number.parseFloat字符串转整数、浮点数</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Number</span>.<span class="built_in">parseInt</span>(<span class="string">&#x27;531dawd&#x27;</span>));  <span class="comment">//531</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Number</span>.<span class="built_in">parseFloat</span>(<span class="string">&#x27;3.152135asd&#x27;</span>));  <span class="comment">//3.152135</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 6.Number.isInteger判断一个数是否为整数</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Number</span>.<span class="title function_">isInteger</span>(<span class="number">5</span>));  <span class="comment">//true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Number</span>.<span class="title function_">isInteger</span>(<span class="number">2.5</span>));  <span class="comment">//false</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 7.Math.trunc将数字的小数部分抹掉</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Math</span>.<span class="title function_">trunc</span>(<span class="number">3.5</span>));  <span class="comment">//3</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 8.Math.sign检测一个数是正负数</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Math</span>.<span class="title function_">sign</span>(<span class="number">100</span>));  <span class="comment">//1 代表正数</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Math</span>.<span class="title function_">sign</span>(-<span class="number">10</span>));  <span class="comment">//-1  代表负数</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Math</span>.<span class="title function_">sign</span>(<span class="number">0</span>));  <span class="comment">//0  代表0</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Math</span>.<span class="title function_">sign</span>(-<span class="number">0</span>));  <span class="comment">//-0</span></span><br></pre></td></tr></table></figure><h2 id="二十、ES6对象方法扩展"><a href="#二十、ES6对象方法扩展" class="headerlink" title="二十、ES6对象方法扩展"></a>二十、ES6对象方法扩展</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1.Object.is  判断两个值是否完全相等</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Object</span>.<span class="title function_">is</span>(<span class="number">120</span>, <span class="number">121</span>));  <span class="comment">//false</span></span><br><span class="line"><span class="comment">// 区别于 === </span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Object</span>.<span class="title function_">is</span>(<span class="title class_">NaN</span>, <span class="title class_">NaN</span>));  <span class="comment">//true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">NaN</span> === <span class="title class_">NaN</span>);  <span class="comment">//false</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 2.Object.assign  对象的合并</span></span><br><span class="line"><span class="keyword">const</span> config1 = &#123;</span><br><span class="line">    <span class="attr">host</span>: <span class="string">&#x27;localhost&#x27;</span>,</span><br><span class="line">    <span class="attr">port</span>: <span class="number">3306</span>,</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;root&#x27;</span>,</span><br><span class="line">    <span class="attr">pass</span>: <span class="string">&#x27;root&#x27;</span>,</span><br><span class="line">    <span class="attr">test</span>: <span class="string">&#x27;test&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> config2 = &#123;</span><br><span class="line">    <span class="attr">host</span>: <span class="string">&#x27;http://atguigu.com&#x27;</span>,</span><br><span class="line">    <span class="attr">port</span>: <span class="number">33060</span>,</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;atguigu.com&#x27;</span>,</span><br><span class="line">    <span class="attr">pass</span>: <span class="string">&#x27;666&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// config2会将config1的重名属性覆盖掉，不重名的则保留</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Object</span>.<span class="title function_">assign</span>(config1, config2));</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3.Object.setPrototypeOf  设置原型对象</span></span><br><span class="line"><span class="keyword">const</span> school = &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;尚硅谷&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> cities = &#123;</span><br><span class="line">    <span class="attr">xiaoqu</span>: [<span class="string">&#x27;北京&#x27;</span>,<span class="string">&#x27;上海&#x27;</span>,<span class="string">&#x27;深圳&#x27;</span>]</span><br><span class="line">&#125;</span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">setPrototypeOf</span>(school,cities);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(school);</span><br></pre></td></tr></table></figure><p><img src="/img/js_img/01.png" alt="33行控制台运行结果"></p><h2 id="二十一、模块化"><a href="#二十一、模块化" class="headerlink" title="二十一、模块化"></a>二十一、模块化</h2><h3 id="1-模块化是将一个很大的程序文件，拆分成许多小的文件-即模块-，然后再将小文件组合起来"><a href="#1-模块化是将一个很大的程序文件，拆分成许多小的文件-即模块-，然后再将小文件组合起来" class="headerlink" title="1.模块化是将一个很大的程序文件，拆分成许多小的文件(即模块)，然后再将小文件组合起来"></a>1.模块化是将一个很大的程序文件，拆分成许多小的文件(即模块)，然后再将小文件组合起来</h3><h4 id="1-模块化的好处"><a href="#1-模块化的好处" class="headerlink" title="(1).模块化的好处"></a>(1).模块化的好处</h4><p>Ⅰ.防止命名冲突<br>Ⅱ.提高代码复用性<br>Ⅲ.高维护性</p><h4 id="2-ES6模块化语法"><a href="#2-ES6模块化语法" class="headerlink" title="(2).ES6模块化语法"></a>(2).ES6模块化语法</h4><p>Ⅰ.模块功能主要由两个命令组成：export和import<br>Ⅱ.export命令用于规定模块的对外接口<br>Ⅲ.import命令用于输入其他模块提供的功能</p><h3 id="2-模块使用方式"><a href="#2-模块使用方式" class="headerlink" title="2.模块使用方式"></a>2.模块使用方式</h3><p>外部模块文件m1.js</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 分别暴露</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">let</span> school = <span class="string">&#x27;尚硅谷&#x27;</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">teach</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;我们可以教给你开发技能&#x27;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>外部模块文件m2.js</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 统一暴露</span></span><br><span class="line"><span class="keyword">let</span> school = <span class="string">&#x27;小红&#x27;</span>;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">findjob</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;我们可以帮你找工作&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> &#123;school, findjob&#125;;</span><br></pre></td></tr></table></figure><p>外部模块文件m3.js</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 默认暴露</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;晓杰&#x27;</span>,</span><br><span class="line">    <span class="attr">change</span>: <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;我们可以&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>调用模块的主程序文件</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// script type=&quot;module&quot;</span></span><br><span class="line"><span class="comment">// 1.通用的导入方式</span></span><br><span class="line"><span class="comment">// 引入m1.js的模块，分别暴露</span></span><br><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> m1 <span class="keyword">from</span> <span class="string">&quot;./m1.js&quot;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(m1);</span><br><span class="line">m1.<span class="title function_">teach</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 引入m2.js模块的内容，统一暴露</span></span><br><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> m2 <span class="keyword">from</span> <span class="string">&quot;./m2.js&quot;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(m2);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(m2.<span class="property">school</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 引入m3.js模块的内容，默认暴露</span></span><br><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> m3 <span class="keyword">from</span> <span class="string">&quot;./m3.js&quot;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(m3);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(m3.<span class="property">default</span>.<span class="property">name</span>);</span><br><span class="line"></span><br><span class="line"><span class="number">2.</span>解构赋值形式导入</span><br><span class="line"><span class="keyword">import</span> &#123;school, teach&#125; <span class="keyword">from</span> <span class="string">&quot;./m1.js&quot;</span>;</span><br><span class="line"><span class="comment">// 因为重名了，所以需要用as起一个别名</span></span><br><span class="line"><span class="keyword">import</span> &#123;school <span class="keyword">as</span> <span class="variable constant_">SC</span>, findjob&#125; <span class="keyword">from</span> <span class="string">&quot;./m2.js&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;<span class="keyword">default</span> <span class="keyword">as</span> m3&#125; <span class="keyword">from</span> <span class="string">&quot;./m3.js&quot;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(school);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable constant_">SC</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(teach);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(m3);</span><br><span class="line"></span><br><span class="line"><span class="number">3.</span>简便形式  针对默认暴露</span><br><span class="line"><span class="keyword">import</span> m3 <span class="keyword">from</span> <span class="string">&quot;./m3.js&quot;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(m3);</span><br></pre></td></tr></table></figure><p><img src="/img/js_img/02.png" alt="分别暴露的控制台输出内容"></p>]]></content>
      
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> ES6 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>我的第一篇博客文章</title>
      <link href="/2022/12/05/%E6%88%91%E7%9A%84%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2%E6%96%87%E7%AB%A0/"/>
      <url>/2022/12/05/%E6%88%91%E7%9A%84%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2%E6%96%87%E7%AB%A0/</url>
      
        <content type="html"><![CDATA[<h2 id="今天学习了建站方法，建立了一个只属于自己的博客。"><a href="#今天学习了建站方法，建立了一个只属于自己的博客。" class="headerlink" title="今天学习了建站方法，建立了一个只属于自己的博客。"></a>今天学习了建站方法，建立了一个只属于自己的博客。</h2><p>md文件中sticky表示置顶，数值越大，置顶效果越强。</p><p>cover表示该文章的插图，若不写，则会被全局覆盖。</p><p>如果该文章不是原创的，而是转载的，则应该加上copyriagnt:false，这样在文章最后就不会显示版权信息.</p><p>给添加的图片进行注释：<img src="%E5%9B%BE%E7%89%87%E5%9C%B0%E5%9D%80" alt="注释内容"></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
